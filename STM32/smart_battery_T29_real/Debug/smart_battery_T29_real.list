
smart_battery_T29_real.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004558  08004558  000060c0  2**0
                  CONTENTS
  4 .ARM          00000008  08004558  08004558  00005558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004560  08004560  000060c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004560  08004560  00005560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  08004568  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000c0  08004628  000060c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08004628  0000631c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a51  00000000  00000000  000060e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a41  00000000  00000000  0000eb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00010580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fb  00000000  00000000  00010d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001715f  00000000  00000000  00011353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a584  00000000  00000000  000284b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846c0  00000000  00000000  00032a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b70f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000b713c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b96d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	080044d0 	.word	0x080044d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	080044d0 	.word	0x080044d0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_frsub>:
 800094c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000950:	e002      	b.n	8000958 <__addsf3>
 8000952:	bf00      	nop

08000954 <__aeabi_fsub>:
 8000954:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000958 <__addsf3>:
 8000958:	0042      	lsls	r2, r0, #1
 800095a:	bf1f      	itttt	ne
 800095c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000960:	ea92 0f03 	teqne	r2, r3
 8000964:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000968:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800096c:	d06a      	beq.n	8000a44 <__addsf3+0xec>
 800096e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000972:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000976:	bfc1      	itttt	gt
 8000978:	18d2      	addgt	r2, r2, r3
 800097a:	4041      	eorgt	r1, r0
 800097c:	4048      	eorgt	r0, r1
 800097e:	4041      	eorgt	r1, r0
 8000980:	bfb8      	it	lt
 8000982:	425b      	neglt	r3, r3
 8000984:	2b19      	cmp	r3, #25
 8000986:	bf88      	it	hi
 8000988:	4770      	bxhi	lr
 800098a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800098e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000992:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4249      	negne	r1, r1
 80009aa:	ea92 0f03 	teq	r2, r3
 80009ae:	d03f      	beq.n	8000a30 <__addsf3+0xd8>
 80009b0:	f1a2 0201 	sub.w	r2, r2, #1
 80009b4:	fa41 fc03 	asr.w	ip, r1, r3
 80009b8:	eb10 000c 	adds.w	r0, r0, ip
 80009bc:	f1c3 0320 	rsb	r3, r3, #32
 80009c0:	fa01 f103 	lsl.w	r1, r1, r3
 80009c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009c8:	d502      	bpl.n	80009d0 <__addsf3+0x78>
 80009ca:	4249      	negs	r1, r1
 80009cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009d4:	d313      	bcc.n	80009fe <__addsf3+0xa6>
 80009d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009da:	d306      	bcc.n	80009ea <__addsf3+0x92>
 80009dc:	0840      	lsrs	r0, r0, #1
 80009de:	ea4f 0131 	mov.w	r1, r1, rrx
 80009e2:	f102 0201 	add.w	r2, r2, #1
 80009e6:	2afe      	cmp	r2, #254	@ 0xfe
 80009e8:	d251      	bcs.n	8000a8e <__addsf3+0x136>
 80009ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f2:	bf08      	it	eq
 80009f4:	f020 0001 	biceq.w	r0, r0, #1
 80009f8:	ea40 0003 	orr.w	r0, r0, r3
 80009fc:	4770      	bx	lr
 80009fe:	0049      	lsls	r1, r1, #1
 8000a00:	eb40 0000 	adc.w	r0, r0, r0
 8000a04:	3a01      	subs	r2, #1
 8000a06:	bf28      	it	cs
 8000a08:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a0c:	d2ed      	bcs.n	80009ea <__addsf3+0x92>
 8000a0e:	fab0 fc80 	clz	ip, r0
 8000a12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a16:	ebb2 020c 	subs.w	r2, r2, ip
 8000a1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a1e:	bfaa      	itet	ge
 8000a20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a24:	4252      	neglt	r2, r2
 8000a26:	4318      	orrge	r0, r3
 8000a28:	bfbc      	itt	lt
 8000a2a:	40d0      	lsrlt	r0, r2
 8000a2c:	4318      	orrlt	r0, r3
 8000a2e:	4770      	bx	lr
 8000a30:	f092 0f00 	teq	r2, #0
 8000a34:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a38:	bf06      	itte	eq
 8000a3a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a3e:	3201      	addeq	r2, #1
 8000a40:	3b01      	subne	r3, #1
 8000a42:	e7b5      	b.n	80009b0 <__addsf3+0x58>
 8000a44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a4c:	bf18      	it	ne
 8000a4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a52:	d021      	beq.n	8000a98 <__addsf3+0x140>
 8000a54:	ea92 0f03 	teq	r2, r3
 8000a58:	d004      	beq.n	8000a64 <__addsf3+0x10c>
 8000a5a:	f092 0f00 	teq	r2, #0
 8000a5e:	bf08      	it	eq
 8000a60:	4608      	moveq	r0, r1
 8000a62:	4770      	bx	lr
 8000a64:	ea90 0f01 	teq	r0, r1
 8000a68:	bf1c      	itt	ne
 8000a6a:	2000      	movne	r0, #0
 8000a6c:	4770      	bxne	lr
 8000a6e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a72:	d104      	bne.n	8000a7e <__addsf3+0x126>
 8000a74:	0040      	lsls	r0, r0, #1
 8000a76:	bf28      	it	cs
 8000a78:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a7c:	4770      	bx	lr
 8000a7e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a82:	bf3c      	itt	cc
 8000a84:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bxcc	lr
 8000a8a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a8e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	4770      	bx	lr
 8000a98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a9c:	bf16      	itet	ne
 8000a9e:	4608      	movne	r0, r1
 8000aa0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000aa4:	4601      	movne	r1, r0
 8000aa6:	0242      	lsls	r2, r0, #9
 8000aa8:	bf06      	itte	eq
 8000aaa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aae:	ea90 0f01 	teqeq	r0, r1
 8000ab2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_ui2f>:
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e004      	b.n	8000ac8 <__aeabi_i2f+0x8>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_i2f>:
 8000ac0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ac4:	bf48      	it	mi
 8000ac6:	4240      	negmi	r0, r0
 8000ac8:	ea5f 0c00 	movs.w	ip, r0
 8000acc:	bf08      	it	eq
 8000ace:	4770      	bxeq	lr
 8000ad0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ad4:	4601      	mov	r1, r0
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	e01c      	b.n	8000b16 <__aeabi_l2f+0x2a>

08000adc <__aeabi_ul2f>:
 8000adc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae0:	bf08      	it	eq
 8000ae2:	4770      	bxeq	lr
 8000ae4:	f04f 0300 	mov.w	r3, #0
 8000ae8:	e00a      	b.n	8000b00 <__aeabi_l2f+0x14>
 8000aea:	bf00      	nop

08000aec <__aeabi_l2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000af8:	d502      	bpl.n	8000b00 <__aeabi_l2f+0x14>
 8000afa:	4240      	negs	r0, r0
 8000afc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b00:	ea5f 0c01 	movs.w	ip, r1
 8000b04:	bf02      	ittt	eq
 8000b06:	4684      	moveq	ip, r0
 8000b08:	4601      	moveq	r1, r0
 8000b0a:	2000      	moveq	r0, #0
 8000b0c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b10:	bf08      	it	eq
 8000b12:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b1a:	fabc f28c 	clz	r2, ip
 8000b1e:	3a08      	subs	r2, #8
 8000b20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b24:	db10      	blt.n	8000b48 <__aeabi_l2f+0x5c>
 8000b26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b2a:	4463      	add	r3, ip
 8000b2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f102 0220 	add.w	r2, r2, #32
 8000b4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b50:	f1c2 0220 	rsb	r2, r2, #32
 8000b54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b58:	fa21 f202 	lsr.w	r2, r1, r2
 8000b5c:	eb43 0002 	adc.w	r0, r3, r2
 8000b60:	bf08      	it	eq
 8000b62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_fmul>:
 8000b68:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b70:	bf1e      	ittt	ne
 8000b72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b76:	ea92 0f0c 	teqne	r2, ip
 8000b7a:	ea93 0f0c 	teqne	r3, ip
 8000b7e:	d06f      	beq.n	8000c60 <__aeabi_fmul+0xf8>
 8000b80:	441a      	add	r2, r3
 8000b82:	ea80 0c01 	eor.w	ip, r0, r1
 8000b86:	0240      	lsls	r0, r0, #9
 8000b88:	bf18      	it	ne
 8000b8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b8e:	d01e      	beq.n	8000bce <__aeabi_fmul+0x66>
 8000b90:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ba0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ba4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ba8:	bf3e      	ittt	cc
 8000baa:	0049      	lslcc	r1, r1, #1
 8000bac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bb0:	005b      	lslcc	r3, r3, #1
 8000bb2:	ea40 0001 	orr.w	r0, r0, r1
 8000bb6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bba:	2afd      	cmp	r2, #253	@ 0xfd
 8000bbc:	d81d      	bhi.n	8000bfa <__aeabi_fmul+0x92>
 8000bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	4770      	bx	lr
 8000bce:	f090 0f00 	teq	r0, #0
 8000bd2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd6:	bf08      	it	eq
 8000bd8:	0249      	lsleq	r1, r1, #9
 8000bda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000be2:	3a7f      	subs	r2, #127	@ 0x7f
 8000be4:	bfc2      	ittt	gt
 8000be6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000bea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bee:	4770      	bxgt	lr
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	dc5d      	bgt.n	8000cb8 <__aeabi_fmul+0x150>
 8000bfc:	f112 0f19 	cmn.w	r2, #25
 8000c00:	bfdc      	itt	le
 8000c02:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c06:	4770      	bxle	lr
 8000c08:	f1c2 0200 	rsb	r2, r2, #0
 8000c0c:	0041      	lsls	r1, r0, #1
 8000c0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c12:	f1c2 0220 	rsb	r2, r2, #32
 8000c16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c1e:	f140 0000 	adc.w	r0, r0, #0
 8000c22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c26:	bf08      	it	eq
 8000c28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2c:	4770      	bx	lr
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c36:	bf02      	ittt	eq
 8000c38:	0040      	lsleq	r0, r0, #1
 8000c3a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c3e:	3a01      	subeq	r2, #1
 8000c40:	d0f9      	beq.n	8000c36 <__aeabi_fmul+0xce>
 8000c42:	ea40 000c 	orr.w	r0, r0, ip
 8000c46:	f093 0f00 	teq	r3, #0
 8000c4a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c4e:	bf02      	ittt	eq
 8000c50:	0049      	lsleq	r1, r1, #1
 8000c52:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c56:	3b01      	subeq	r3, #1
 8000c58:	d0f9      	beq.n	8000c4e <__aeabi_fmul+0xe6>
 8000c5a:	ea41 010c 	orr.w	r1, r1, ip
 8000c5e:	e78f      	b.n	8000b80 <__aeabi_fmul+0x18>
 8000c60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c64:	ea92 0f0c 	teq	r2, ip
 8000c68:	bf18      	it	ne
 8000c6a:	ea93 0f0c 	teqne	r3, ip
 8000c6e:	d00a      	beq.n	8000c86 <__aeabi_fmul+0x11e>
 8000c70:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c74:	bf18      	it	ne
 8000c76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c7a:	d1d8      	bne.n	8000c2e <__aeabi_fmul+0xc6>
 8000c7c:	ea80 0001 	eor.w	r0, r0, r1
 8000c80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c84:	4770      	bx	lr
 8000c86:	f090 0f00 	teq	r0, #0
 8000c8a:	bf17      	itett	ne
 8000c8c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000c90:	4608      	moveq	r0, r1
 8000c92:	f091 0f00 	teqne	r1, #0
 8000c96:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000c9a:	d014      	beq.n	8000cc6 <__aeabi_fmul+0x15e>
 8000c9c:	ea92 0f0c 	teq	r2, ip
 8000ca0:	d101      	bne.n	8000ca6 <__aeabi_fmul+0x13e>
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	d10f      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000ca6:	ea93 0f0c 	teq	r3, ip
 8000caa:	d103      	bne.n	8000cb4 <__aeabi_fmul+0x14c>
 8000cac:	024b      	lsls	r3, r1, #9
 8000cae:	bf18      	it	ne
 8000cb0:	4608      	movne	r0, r1
 8000cb2:	d108      	bne.n	8000cc6 <__aeabi_fmul+0x15e>
 8000cb4:	ea80 0001 	eor.w	r0, r0, r1
 8000cb8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fdiv>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d069      	beq.n	8000dbc <__aeabi_fdiv+0xec>
 8000ce8:	eba2 0203 	sub.w	r2, r2, r3
 8000cec:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cf6:	d037      	beq.n	8000d68 <__aeabi_fdiv+0x98>
 8000cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf38      	it	cc
 8000d0c:	005b      	lslcc	r3, r3, #1
 8000d0e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d12:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d16:	428b      	cmp	r3, r1
 8000d18:	bf24      	itt	cs
 8000d1a:	1a5b      	subcs	r3, r3, r1
 8000d1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d24:	bf24      	itt	cs
 8000d26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d32:	bf24      	itt	cs
 8000d34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d52:	d1e0      	bne.n	8000d16 <__aeabi_fdiv+0x46>
 8000d54:	2afd      	cmp	r2, #253	@ 0xfd
 8000d56:	f63f af50 	bhi.w	8000bfa <__aeabi_fmul+0x92>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d70:	327f      	adds	r2, #127	@ 0x7f
 8000d72:	bfc2      	ittt	gt
 8000d74:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7c:	4770      	bxgt	lr
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	3a01      	subs	r2, #1
 8000d88:	e737      	b.n	8000bfa <__aeabi_fmul+0x92>
 8000d8a:	f092 0f00 	teq	r2, #0
 8000d8e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d92:	bf02      	ittt	eq
 8000d94:	0040      	lsleq	r0, r0, #1
 8000d96:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d9a:	3a01      	subeq	r2, #1
 8000d9c:	d0f9      	beq.n	8000d92 <__aeabi_fdiv+0xc2>
 8000d9e:	ea40 000c 	orr.w	r0, r0, ip
 8000da2:	f093 0f00 	teq	r3, #0
 8000da6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000daa:	bf02      	ittt	eq
 8000dac:	0049      	lsleq	r1, r1, #1
 8000dae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000db2:	3b01      	subeq	r3, #1
 8000db4:	d0f9      	beq.n	8000daa <__aeabi_fdiv+0xda>
 8000db6:	ea41 010c 	orr.w	r1, r1, ip
 8000dba:	e795      	b.n	8000ce8 <__aeabi_fdiv+0x18>
 8000dbc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dc0:	ea92 0f0c 	teq	r2, ip
 8000dc4:	d108      	bne.n	8000dd8 <__aeabi_fdiv+0x108>
 8000dc6:	0242      	lsls	r2, r0, #9
 8000dc8:	f47f af7d 	bne.w	8000cc6 <__aeabi_fmul+0x15e>
 8000dcc:	ea93 0f0c 	teq	r3, ip
 8000dd0:	f47f af70 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e776      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000dd8:	ea93 0f0c 	teq	r3, ip
 8000ddc:	d104      	bne.n	8000de8 <__aeabi_fdiv+0x118>
 8000dde:	024b      	lsls	r3, r1, #9
 8000de0:	f43f af4c 	beq.w	8000c7c <__aeabi_fmul+0x114>
 8000de4:	4608      	mov	r0, r1
 8000de6:	e76e      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df2:	d1ca      	bne.n	8000d8a <__aeabi_fdiv+0xba>
 8000df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000df8:	f47f af5c 	bne.w	8000cb4 <__aeabi_fmul+0x14c>
 8000dfc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e00:	f47f af3c 	bne.w	8000c7c <__aeabi_fmul+0x114>
 8000e04:	e75f      	b.n	8000cc6 <__aeabi_fmul+0x15e>
 8000e06:	bf00      	nop

08000e08 <__aeabi_f2iz>:
 8000e08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e10:	d30f      	bcc.n	8000e32 <__aeabi_f2iz+0x2a>
 8000e12:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1a:	d90d      	bls.n	8000e38 <__aeabi_f2iz+0x30>
 8000e1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e24:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e28:	fa23 f002 	lsr.w	r0, r3, r2
 8000e2c:	bf18      	it	ne
 8000e2e:	4240      	negne	r0, r0
 8000e30:	4770      	bx	lr
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	4770      	bx	lr
 8000e38:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e3c:	d101      	bne.n	8000e42 <__aeabi_f2iz+0x3a>
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	d105      	bne.n	8000e4e <__aeabi_f2iz+0x46>
 8000e42:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e46:	bf08      	it	eq
 8000e48:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f04f 0000 	mov.w	r0, #0
 8000e52:	4770      	bx	lr
 8000e54:	0000      	movs	r0, r0
	...

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init(); // Khởi tạo HAL Library, reset tất cả các thiết bị ngoại vi và cấu hình hệ thống Systick.
 8000e5e:	f000 fc61 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */
  // Khởi tạo các thành phần cần thiết trước khi hệ thống chính bắt đầu.
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config(); // Cấu hình clock của hệ thống.
 8000e62:	f000 f9b5 	bl	80011d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  // Khởi tạo các thành phần của hệ thống mà cần thiết trước khi các thiết bị ngoại vi được khởi tạo.
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init(); // Khởi tạo các chân GPIO.
 8000e66:	f000 faa9 	bl	80013bc <MX_GPIO_Init>
  MX_ADC1_Init(); // Khởi tạo ADC1.
 8000e6a:	f000 fa01 	bl	8001270 <MX_ADC1_Init>
  MX_ADC2_Init(); // Khởi tạo ADC2.
 8000e6e:	f000 fa3d 	bl	80012ec <MX_ADC2_Init>
  MX_USART1_UART_Init(); // Khởi tạo UART1.
 8000e72:	f000 fa79 	bl	8001368 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Chuẩn bị buffer để chứa dữ liệu
    strcpy((char*)data_val, "BAT001");
 8000e76:	4bb8      	ldr	r3, [pc, #736]	@ (8001158 <main+0x300>)
 8000e78:	4ab8      	ldr	r2, [pc, #736]	@ (800115c <main+0x304>)
 8000e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e7e:	6018      	str	r0, [r3, #0]
 8000e80:	3304      	adds	r3, #4
 8000e82:	8019      	strh	r1, [r3, #0]
 8000e84:	3302      	adds	r3, #2
 8000e86:	0c0a      	lsrs	r2, r1, #16
 8000e88:	701a      	strb	r2, [r3, #0]
    strcpy((char*)data_temp, "");
 8000e8a:	4bb5      	ldr	r3, [pc, #724]	@ (8001160 <main+0x308>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
    strcpy((char*)data_cap, "");
 8000e90:	4bb4      	ldr	r3, [pc, #720]	@ (8001164 <main+0x30c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    strcpy((char*)Ccharging, "");
 8000e96:	4bb4      	ldr	r3, [pc, #720]	@ (8001168 <main+0x310>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    strcpy((char*)Cfull, "");
 8000e9c:	4bb3      	ldr	r3, [pc, #716]	@ (800116c <main+0x314>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]

    // Khởi tạo lại các biến tổng
    sum_cap = 0;
 8000ea2:	4bb3      	ldr	r3, [pc, #716]	@ (8001170 <main+0x318>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
    sum_temp = 0;
 8000ea8:	4bb2      	ldr	r3, [pc, #712]	@ (8001174 <main+0x31c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]

    // Đọc ADC 100 lần để lấy giá trị trung bình
    for(int i = 0; i < 100; i++) {
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	e09b      	b.n	8000fec <main+0x194>
      ADC_cap = 0;
 8000eb4:	4bb0      	ldr	r3, [pc, #704]	@ (8001178 <main+0x320>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
      ADC_temp = 0;
 8000eba:	4bb0      	ldr	r3, [pc, #704]	@ (800117c <main+0x324>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
      _temp = 0.0;
 8000ec0:	4baf      	ldr	r3, [pc, #700]	@ (8001180 <main+0x328>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
      _cap = 0;
 8000ec6:	4baf      	ldr	r3, [pc, #700]	@ (8001184 <main+0x32c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

      // Bắt đầu chuyển đổi ADC1 và ADC2
      HAL_ADC_Start(&hadc1);
 8000ecc:	48ae      	ldr	r0, [pc, #696]	@ (8001188 <main+0x330>)
 8000ece:	f000 fd87 	bl	80019e0 <HAL_ADC_Start>
      HAL_ADC_Start(&hadc2);
 8000ed2:	48ae      	ldr	r0, [pc, #696]	@ (800118c <main+0x334>)
 8000ed4:	f000 fd84 	bl	80019e0 <HAL_ADC_Start>

      // Lấy giá trị từ ADC1 và ADC2
      ADC_temp = HAL_ADC_GetValue(&hadc1);
 8000ed8:	48ab      	ldr	r0, [pc, #684]	@ (8001188 <main+0x330>)
 8000eda:	f000 fe5b 	bl	8001b94 <HAL_ADC_GetValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4aa6      	ldr	r2, [pc, #664]	@ (800117c <main+0x324>)
 8000ee2:	6013      	str	r3, [r2, #0]
      ADC_cap = HAL_ADC_GetValue(&hadc2);
 8000ee4:	48a9      	ldr	r0, [pc, #676]	@ (800118c <main+0x334>)
 8000ee6:	f000 fe55 	bl	8001b94 <HAL_ADC_GetValue>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4aa2      	ldr	r2, [pc, #648]	@ (8001178 <main+0x320>)
 8000eee:	6013      	str	r3, [r2, #0]

      // Dừng chuyển đổi ADC1 và ADC2
      HAL_ADC_Stop(&hadc1);
 8000ef0:	48a5      	ldr	r0, [pc, #660]	@ (8001188 <main+0x330>)
 8000ef2:	f000 fe23 	bl	8001b3c <HAL_ADC_Stop>
      HAL_ADC_Stop(&hadc2);
 8000ef6:	48a5      	ldr	r0, [pc, #660]	@ (800118c <main+0x334>)
 8000ef8:	f000 fe20 	bl	8001b3c <HAL_ADC_Stop>

      // Tính toán giá trị dung lượng và nhiệt độ pin từ giá trị ADC
      _cap = ((((float)ADC_cap * 3.3 * 4 / 4096) - 4.2 - 3.0) / 1.2) * 100.0;
 8000efc:	4b9e      	ldr	r3, [pc, #632]	@ (8001178 <main+0x320>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fdd9 	bl	8000ab8 <__aeabi_ui2f>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fa8d 	bl	8000428 <__aeabi_f2d>
 8000f0e:	a38e      	add	r3, pc, #568	@ (adr r3, 8001148 <main+0x2f0>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fae0 	bl	80004d8 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f04f 0200 	mov.w	r2, #0
 8000f24:	4b9a      	ldr	r3, [pc, #616]	@ (8001190 <main+0x338>)
 8000f26:	f7ff fad7 	bl	80004d8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	4b97      	ldr	r3, [pc, #604]	@ (8001194 <main+0x33c>)
 8000f38:	f7ff fbf8 	bl	800072c <__aeabi_ddiv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	a382      	add	r3, pc, #520	@ (adr r3, 8001150 <main+0x2f8>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff f90d 	bl	8000168 <__aeabi_dsub>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8001198 <main+0x340>)
 8000f5c:	f7ff f904 	bl	8000168 <__aeabi_dsub>
 8000f60:	4602      	mov	r2, r0
 8000f62:	460b      	mov	r3, r1
 8000f64:	4610      	mov	r0, r2
 8000f66:	4619      	mov	r1, r3
 8000f68:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800119c <main+0x344>)
 8000f6e:	f7ff fbdd 	bl	800072c <__aeabi_ddiv>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b88      	ldr	r3, [pc, #544]	@ (80011a0 <main+0x348>)
 8000f80:	f7ff faaa 	bl	80004d8 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fcb6 	bl	80008fc <__aeabi_d2iz>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a7c      	ldr	r2, [pc, #496]	@ (8001184 <main+0x32c>)
 8000f94:	6013      	str	r3, [r2, #0]
      _temp = (float)ADC_temp * 75 / 2048;
 8000f96:	4b79      	ldr	r3, [pc, #484]	@ (800117c <main+0x324>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fd8c 	bl	8000ab8 <__aeabi_ui2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4980      	ldr	r1, [pc, #512]	@ (80011a4 <main+0x34c>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fddf 	bl	8000b68 <__aeabi_fmul>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f04f 418a 	mov.w	r1, #1157627904	@ 0x45000000
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe8d 	bl	8000cd0 <__aeabi_fdiv>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff25 	bl	8000e08 <__aeabi_f2iz>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a6f      	ldr	r2, [pc, #444]	@ (8001180 <main+0x328>)
 8000fc2:	6013      	str	r3, [r2, #0]

      // Cộng dồn các giá trị để tính trung bình
      sum_cap += _cap;
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <main+0x318>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8001184 <main+0x32c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a68      	ldr	r2, [pc, #416]	@ (8001170 <main+0x318>)
 8000fd0:	6013      	str	r3, [r2, #0]
      sum_temp += _temp;
 8000fd2:	4b68      	ldr	r3, [pc, #416]	@ (8001174 <main+0x31c>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001180 <main+0x328>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a65      	ldr	r2, [pc, #404]	@ (8001174 <main+0x31c>)
 8000fde:	6013      	str	r3, [r2, #0]

      // Chờ một khoảng thời gian ngắn
      HAL_Delay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fc01 	bl	80017e8 <HAL_Delay>
    for(int i = 0; i < 100; i++) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b63      	cmp	r3, #99	@ 0x63
 8000ff0:	f77f af60 	ble.w	8000eb4 <main+0x5c>
    }

    // Đọc trạng thái của các chân GPIO
    charging = 0;
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80011a8 <main+0x350>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    is_full = 0;
 8000ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80011ac <main+0x354>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

    is_full = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); // Đọc trạng thái chân GPIO_PIN_0
 8001000:	2101      	movs	r1, #1
 8001002:	486b      	ldr	r0, [pc, #428]	@ (80011b0 <main+0x358>)
 8001004:	f001 faa2 	bl	800254c <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <main+0x354>)
 800100e:	601a      	str	r2, [r3, #0]
    charging = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); // Đọc trạng thái chân GPIO_PIN_1
 8001010:	2102      	movs	r1, #2
 8001012:	4867      	ldr	r0, [pc, #412]	@ (80011b0 <main+0x358>)
 8001014:	f001 fa9a 	bl	800254c <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b62      	ldr	r3, [pc, #392]	@ (80011a8 <main+0x350>)
 800101e:	601a      	str	r2, [r3, #0]


    // Tính giá trị trung bình của dung lượng và nhiệt độ pin
    val_cap = sum_cap / 100;
 8001020:	4b53      	ldr	r3, [pc, #332]	@ (8001170 <main+0x318>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a63      	ldr	r2, [pc, #396]	@ (80011b4 <main+0x35c>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1152      	asrs	r2, r2, #5
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4a61      	ldr	r2, [pc, #388]	@ (80011b8 <main+0x360>)
 8001032:	6013      	str	r3, [r2, #0]
    val_temp = sum_temp / 100.0 + 6; // Cộng thêm 6 để điều chỉnh nhiệt độ
 8001034:	4b4f      	ldr	r3, [pc, #316]	@ (8001174 <main+0x31c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff f9e3 	bl	8000404 <__aeabi_i2d>
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <main+0x348>)
 8001044:	f7ff fb72 	bl	800072c <__aeabi_ddiv>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b59      	ldr	r3, [pc, #356]	@ (80011bc <main+0x364>)
 8001056:	f7ff f889 	bl	800016c <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f7ff fc4b 	bl	80008fc <__aeabi_d2iz>
 8001066:	4603      	mov	r3, r0
 8001068:	4a55      	ldr	r2, [pc, #340]	@ (80011c0 <main+0x368>)
 800106a:	6013      	str	r3, [r2, #0]

    // Chuyển đổi các giá trị thành chuỗi ký tự
    sprintf((char*)data_temp, "%lu", val_temp);
 800106c:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <main+0x368>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4954      	ldr	r1, [pc, #336]	@ (80011c4 <main+0x36c>)
 8001074:	483a      	ldr	r0, [pc, #232]	@ (8001160 <main+0x308>)
 8001076:	f002 fd6b 	bl	8003b50 <siprintf>
    sprintf((char*)data_cap, "%lu", val_cap);
 800107a:	4b4f      	ldr	r3, [pc, #316]	@ (80011b8 <main+0x360>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4950      	ldr	r1, [pc, #320]	@ (80011c4 <main+0x36c>)
 8001082:	4838      	ldr	r0, [pc, #224]	@ (8001164 <main+0x30c>)
 8001084:	f002 fd64 	bl	8003b50 <siprintf>
    sprintf((char*)Ccharging, "%lu", charging);
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <main+0x350>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	494d      	ldr	r1, [pc, #308]	@ (80011c4 <main+0x36c>)
 8001090:	4835      	ldr	r0, [pc, #212]	@ (8001168 <main+0x310>)
 8001092:	f002 fd5d 	bl	8003b50 <siprintf>
    sprintf((char*)Cfull, "%lu", is_full);
 8001096:	4b45      	ldr	r3, [pc, #276]	@ (80011ac <main+0x354>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4949      	ldr	r1, [pc, #292]	@ (80011c4 <main+0x36c>)
 800109e:	4833      	ldr	r0, [pc, #204]	@ (800116c <main+0x314>)
 80010a0:	f002 fd56 	bl	8003b50 <siprintf>

    // Ghép các chuỗi ký tự lại thành một chuỗi duy nhất
    strcat((char*)data_val, " ");
 80010a4:	482c      	ldr	r0, [pc, #176]	@ (8001158 <main+0x300>)
 80010a6:	f7ff f853 	bl	8000150 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001158 <main+0x300>)
 80010b0:	4413      	add	r3, r2
 80010b2:	4945      	ldr	r1, [pc, #276]	@ (80011c8 <main+0x370>)
 80010b4:	461a      	mov	r2, r3
 80010b6:	460b      	mov	r3, r1
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	8013      	strh	r3, [r2, #0]
    strcat((char*)data_val, (char*)data_temp);
 80010bc:	4928      	ldr	r1, [pc, #160]	@ (8001160 <main+0x308>)
 80010be:	4826      	ldr	r0, [pc, #152]	@ (8001158 <main+0x300>)
 80010c0:	f002 fd6e 	bl	8003ba0 <strcat>
    strcat((char*)data_val, " ");
 80010c4:	4824      	ldr	r0, [pc, #144]	@ (8001158 <main+0x300>)
 80010c6:	f7ff f843 	bl	8000150 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <main+0x300>)
 80010d0:	4413      	add	r3, r2
 80010d2:	493d      	ldr	r1, [pc, #244]	@ (80011c8 <main+0x370>)
 80010d4:	461a      	mov	r2, r3
 80010d6:	460b      	mov	r3, r1
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	8013      	strh	r3, [r2, #0]
    strcat((char*)data_val, (char*)data_cap);
 80010dc:	4921      	ldr	r1, [pc, #132]	@ (8001164 <main+0x30c>)
 80010de:	481e      	ldr	r0, [pc, #120]	@ (8001158 <main+0x300>)
 80010e0:	f002 fd5e 	bl	8003ba0 <strcat>
    strcat((char*)data_val, " ");
 80010e4:	481c      	ldr	r0, [pc, #112]	@ (8001158 <main+0x300>)
 80010e6:	f7ff f833 	bl	8000150 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <main+0x300>)
 80010f0:	4413      	add	r3, r2
 80010f2:	4935      	ldr	r1, [pc, #212]	@ (80011c8 <main+0x370>)
 80010f4:	461a      	mov	r2, r3
 80010f6:	460b      	mov	r3, r1
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	8013      	strh	r3, [r2, #0]
    strcat((char*)data_val, (char*)Ccharging);
 80010fc:	491a      	ldr	r1, [pc, #104]	@ (8001168 <main+0x310>)
 80010fe:	4816      	ldr	r0, [pc, #88]	@ (8001158 <main+0x300>)
 8001100:	f002 fd4e 	bl	8003ba0 <strcat>
    strcat((char*)data_val, " ");
 8001104:	4814      	ldr	r0, [pc, #80]	@ (8001158 <main+0x300>)
 8001106:	f7ff f823 	bl	8000150 <strlen>
 800110a:	4603      	mov	r3, r0
 800110c:	461a      	mov	r2, r3
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <main+0x300>)
 8001110:	4413      	add	r3, r2
 8001112:	492d      	ldr	r1, [pc, #180]	@ (80011c8 <main+0x370>)
 8001114:	461a      	mov	r2, r3
 8001116:	460b      	mov	r3, r1
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	8013      	strh	r3, [r2, #0]
    strcat((char*)data_val, (char*)Cfull);
 800111c:	4913      	ldr	r1, [pc, #76]	@ (800116c <main+0x314>)
 800111e:	480e      	ldr	r0, [pc, #56]	@ (8001158 <main+0x300>)
 8001120:	f002 fd3e 	bl	8003ba0 <strcat>
    // strcat((char*)data_val, "\n");

    // Truyền chuỗi ký tự qua UART
    HAL_UART_Transmit(&huart1, data_val, strlen(data_val), 100);
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <main+0x300>)
 8001126:	f7ff f813 	bl	8000150 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	2364      	movs	r3, #100	@ 0x64
 8001130:	4909      	ldr	r1, [pc, #36]	@ (8001158 <main+0x300>)
 8001132:	4826      	ldr	r0, [pc, #152]	@ (80011cc <main+0x374>)
 8001134:	f001 ff38 	bl	8002fa8 <HAL_UART_Transmit>

    // Chờ một khoảng thời gian trước khi lặp lại
    HAL_Delay(2000);
 8001138:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800113c:	f000 fb54 	bl	80017e8 <HAL_Delay>
  {
 8001140:	e699      	b.n	8000e76 <main+0x1e>
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	66666666 	.word	0x66666666
 800114c:	400a6666 	.word	0x400a6666
 8001150:	cccccccd 	.word	0xcccccccd
 8001154:	4010cccc 	.word	0x4010cccc
 8001158:	20000000 	.word	0x20000000
 800115c:	080044e8 	.word	0x080044e8
 8001160:	20000184 	.word	0x20000184
 8001164:	2000018c 	.word	0x2000018c
 8001168:	20000194 	.word	0x20000194
 800116c:	2000019c 	.word	0x2000019c
 8001170:	200001c8 	.word	0x200001c8
 8001174:	200001b8 	.word	0x200001b8
 8001178:	200001a8 	.word	0x200001a8
 800117c:	200001a4 	.word	0x200001a4
 8001180:	200001b4 	.word	0x200001b4
 8001184:	200001c0 	.word	0x200001c0
 8001188:	200000dc 	.word	0x200000dc
 800118c:	2000010c 	.word	0x2000010c
 8001190:	40100000 	.word	0x40100000
 8001194:	40b00000 	.word	0x40b00000
 8001198:	40080000 	.word	0x40080000
 800119c:	3ff33333 	.word	0x3ff33333
 80011a0:	40590000 	.word	0x40590000
 80011a4:	42960000 	.word	0x42960000
 80011a8:	200001ac 	.word	0x200001ac
 80011ac:	200001b0 	.word	0x200001b0
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	51eb851f 	.word	0x51eb851f
 80011b8:	200001c4 	.word	0x200001c4
 80011bc:	40180000 	.word	0x40180000
 80011c0:	200001bc 	.word	0x200001bc
 80011c4:	080044f0 	.word	0x080044f0
 80011c8:	080044f4 	.word	0x080044f4
 80011cc:	2000013c 	.word	0x2000013c

080011d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	@ 0x50
 80011d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	2228      	movs	r2, #40	@ 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fcd6 	bl	8003b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f9b1 	bl	800257c <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001220:	f000 f8f6 	bl	8001410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fc1e 	bl	8002a80 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800124a:	f000 f8e1 	bl	8001410 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800124e:	2302      	movs	r3, #2
 8001250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4618      	mov	r0, r3
 800125a:	f001 fd9f 	bl	8002d9c <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001264:	f000 f8d4 	bl	8001410 <Error_Handler>
  }
}
 8001268:	bf00      	nop
 800126a:	3750      	adds	r7, #80	@ 0x50
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_ADC1_Init+0x74>)
 8001282:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <MX_ADC1_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_ADC1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_ADC1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_ADC1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_ADC1_Init+0x74>)
 800129a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800129e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <MX_ADC1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_ADC1_Init+0x74>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ac:	480d      	ldr	r0, [pc, #52]	@ (80012e4 <MX_ADC1_Init+0x74>)
 80012ae:	f000 fabf 	bl	8001830 <HAL_ADC_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 f8aa 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012bc:	2305      	movs	r3, #5
 80012be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_ADC1_Init+0x74>)
 80012ce:	f000 fc6d 	bl	8001bac <HAL_ADC_ConfigChannel>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80012d8:	f000 f89a 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000dc 	.word	0x200000dc
 80012e8:	40012400 	.word	0x40012400

080012ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012fc:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <MX_ADC2_Init+0x74>)
 80012fe:	4a19      	ldr	r2, [pc, #100]	@ (8001364 <MX_ADC2_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001302:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <MX_ADC2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001308:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <MX_ADC2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <MX_ADC2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <MX_ADC2_Init+0x74>)
 8001316:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800131a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <MX_ADC2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <MX_ADC2_Init+0x74>)
 8001324:	2201      	movs	r2, #1
 8001326:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_ADC2_Init+0x74>)
 800132a:	f000 fa81 	bl	8001830 <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f86c 	bl	8001410 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001338:	2307      	movs	r3, #7
 800133a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133c:	2301      	movs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_ADC2_Init+0x74>)
 800134a:	f000 fc2f 	bl	8001bac <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001354:	f000 f85c 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000010c 	.word	0x2000010c
 8001364:	40012800 	.word	0x40012800

08001368 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <MX_USART1_UART_Init+0x50>)
 8001370:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b0e      	ldr	r3, [pc, #56]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139e:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_USART1_UART_Init+0x4c>)
 80013a0:	f001 fdb2 	bl	8002f08 <HAL_UART_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013aa:	f000 f831 	bl	8001410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000013c 	.word	0x2000013c
 80013b8:	40013800 	.word	0x40013800

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <MX_GPIO_Init+0x4c>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <MX_GPIO_Init+0x4c>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_GPIO_Init+0x4c>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80013e8:	2306      	movs	r3, #6
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_GPIO_Init+0x50>)
 80013fc:	f000 ff2a 	bl	8002254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800

08001410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001414:	b672      	cpsid	i
}
 8001416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <Error_Handler+0x8>

0800141c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_MspInit+0x5c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <HAL_MspInit+0x5c>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6193      	str	r3, [r2, #24]
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_MspInit+0x5c>)
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_MspInit+0x5c>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_MspInit+0x5c>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001444:	61d3      	str	r3, [r2, #28]
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_MspInit+0x5c>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <HAL_MspInit+0x60>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_MspInit+0x60>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a28      	ldr	r2, [pc, #160]	@ (800153c <HAL_ADC_MspInit+0xbc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d122      	bne.n	80014e6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a0:	4b27      	ldr	r3, [pc, #156]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a26      	ldr	r2, [pc, #152]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b24      	ldr	r3, [pc, #144]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	4b21      	ldr	r3, [pc, #132]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a20      	ldr	r2, [pc, #128]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014d0:	2320      	movs	r3, #32
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4619      	mov	r1, r3
 80014de:	4819      	ldr	r0, [pc, #100]	@ (8001544 <HAL_ADC_MspInit+0xc4>)
 80014e0:	f000 feb8 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014e4:	e026      	b.n	8001534 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_ADC_MspInit+0xc8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d121      	bne.n	8001534 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_ADC_MspInit+0xc0>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001524:	2303      	movs	r3, #3
 8001526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 0318 	add.w	r3, r7, #24
 800152c:	4619      	mov	r1, r3
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_ADC_MspInit+0xc4>)
 8001530:	f000 fe90 	bl	8002254 <HAL_GPIO_Init>
}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	@ 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40012400 	.word	0x40012400
 8001540:	40021000 	.word	0x40021000
 8001544:	40010800 	.word	0x40010800
 8001548:	40012800 	.word	0x40012800

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a20      	ldr	r2, [pc, #128]	@ (80015e8 <HAL_UART_MspInit+0x9c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d139      	bne.n	80015e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	6193      	str	r3, [r2, #24]
 8001590:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_UART_MspInit+0xa0>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0310 	add.w	r3, r7, #16
 80015ae:	4619      	mov	r1, r3
 80015b0:	480f      	ldr	r0, [pc, #60]	@ (80015f0 <HAL_UART_MspInit+0xa4>)
 80015b2:	f000 fe4f 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	4619      	mov	r1, r3
 80015ca:	4809      	ldr	r0, [pc, #36]	@ (80015f0 <HAL_UART_MspInit+0xa4>)
 80015cc:	f000 fe42 	bl	8002254 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2101      	movs	r1, #1
 80015d4:	2025      	movs	r0, #37	@ 0x25
 80015d6:	f000 fd54 	bl	8002082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015da:	2025      	movs	r0, #37	@ 0x25
 80015dc:	f000 fd6d 	bl	80020ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010800 	.word	0x40010800

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <NMI_Handler+0x4>

080015fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <MemManage_Handler+0x4>

0800160c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <UsageFault_Handler+0x4>

0800161c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f8b4 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <USART1_IRQHandler+0x10>)
 8001652:	f001 fd2d 	bl	80030b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000013c 	.word	0x2000013c

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f002 fa96 	bl	8003bc0 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20002800 	.word	0x20002800
 80016c0:	00000400 	.word	0x00000400
 80016c4:	200001cc 	.word	0x200001cc
 80016c8:	20000320 	.word	0x20000320

080016cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fff8 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	@ (800170c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016de:	490c      	ldr	r1, [pc, #48]	@ (8001710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f4:	4c09      	ldr	r4, [pc, #36]	@ (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f002 fa63 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff fba7 	bl	8000e58 <main>
  bx lr
 800170a:	4770      	bx	lr
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8001714:	08004568 	.word	0x08004568
  ldr r2, =_sbss
 8001718:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 800171c:	2000031c 	.word	0x2000031c

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 fc99 	bl	800206c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe6c 	bl	800141c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fcb1 	bl	80020d6 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 fc79 	bl	8002082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000064 	.word	0x20000064
 80017a8:	2000006c 	.word	0x2000006c
 80017ac:	20000068 	.word	0x20000068

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	@ (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	2000006c 	.word	0x2000006c
 80017d0:	200001d0 	.word	0x200001d0

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	@ (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200001d0 	.word	0x200001d0

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffe0 	bl	80017d4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000006c 	.word	0x2000006c

08001830 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0be      	b.n	80019d0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fe06 	bl	8001480 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 faeb 	bl	8001e50 <ADC_ConversionStop_Disable>
 800187a:	4603      	mov	r3, r0
 800187c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8099 	bne.w	80019be <HAL_ADC_Init+0x18e>
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f040 8095 	bne.w	80019be <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800189c:	f023 0302 	bic.w	r3, r3, #2
 80018a0:	f043 0202 	orr.w	r2, r3, #2
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c8:	d003      	beq.n	80018d2 <HAL_ADC_Init+0xa2>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <HAL_ADC_Init+0xa8>
 80018d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d6:	e000      	b.n	80018da <HAL_ADC_Init+0xaa>
 80018d8:	2300      	movs	r3, #0
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7d1b      	ldrb	r3, [r3, #20]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d119      	bne.n	800191c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7b1b      	ldrb	r3, [r3, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	035a      	lsls	r2, r3, #13
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	e00b      	b.n	800191c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <HAL_ADC_Init+0x1a8>)
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	430b      	orrs	r3, r1
 8001942:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0x126>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d104      	bne.n	8001960 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	3b01      	subs	r3, #1
 800195c:	051b      	lsls	r3, r3, #20
 800195e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001966:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_ADC_Init+0x1ac>)
 800197c:	4013      	ands	r3, r2
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d10b      	bne.n	800199c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f023 0303 	bic.w	r3, r3, #3
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800199a:	e018      	b.n	80019ce <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a0:	f023 0312 	bic.w	r3, r3, #18
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019bc:	e007      	b.n	80019ce <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	ffe1f7fd 	.word	0xffe1f7fd
 80019dc:	ff1f0efe 	.word	0xff1f0efe

080019e0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_ADC_Start+0x1a>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e098      	b.n	8001b2c <HAL_ADC_Start+0x14c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9ca 	bl	8001d9c <ADC_Enable>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8087 	bne.w	8001b22 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a41      	ldr	r2, [pc, #260]	@ (8001b34 <HAL_ADC_Start+0x154>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_Start+0x5e>
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_ADC_Start+0x158>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d115      	bne.n	8001a6a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a60:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a68:	e01d      	b.n	8001aa6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001b38 <HAL_ADC_Start+0x158>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_Start+0xaa>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <HAL_ADC_Start+0x154>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ADC_Start+0xc6>
 8001a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_ADC_Start+0x158>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a9e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	f023 0206 	bic.w	r2, r3, #6
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001abe:	e002      	b.n	8001ac6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f06f 0202 	mvn.w	r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ae2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ae6:	d113      	bne.n	8001b10 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <HAL_ADC_Start+0x154>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_ADC_Start+0x158>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d108      	bne.n	8001b10 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	e00c      	b.n	8001b2a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	e003      	b.n	8001b2a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40012800 	.word	0x40012800
 8001b38:	40012400 	.word	0x40012400

08001b3c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_Stop+0x1a>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e01a      	b.n	8001b8c <HAL_ADC_Stop+0x50>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f976 	bl	8001e50 <ADC_ConversionStop_Disable>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b76:	f023 0301 	bic.w	r3, r3, #1
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x20>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e0dc      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x1da>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b06      	cmp	r3, #6
 8001bda:	d81c      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	3b05      	subs	r3, #5
 8001bee:	221f      	movs	r2, #31
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	4019      	ands	r1, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b05      	subs	r3, #5
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c14:	e03c      	b.n	8001c90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d81c      	bhi.n	8001c58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3b23      	subs	r3, #35	@ 0x23
 8001c30:	221f      	movs	r2, #31
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	4019      	ands	r1, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b23      	subs	r3, #35	@ 0x23
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c56:	e01b      	b.n	8001c90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b41      	subs	r3, #65	@ 0x41
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	4019      	ands	r1, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	3b41      	subs	r3, #65	@ 0x41
 8001c84:	fa00 f203 	lsl.w	r2, r0, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d91c      	bls.n	8001cd2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b1e      	subs	r3, #30
 8001caa:	2207      	movs	r2, #7
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6898      	ldr	r0, [r3, #8]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b1e      	subs	r3, #30
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	e019      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6919      	ldr	r1, [r3, #16]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	4019      	ands	r1, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6898      	ldr	r0, [r3, #8]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d12:	2b11      	cmp	r3, #17
 8001d14:	d132      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d125      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d126      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d11a      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a13      	ldr	r2, [pc, #76]	@ (8001d98 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d50:	0c9a      	lsrs	r2, r3, #18
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d5c:	e002      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f9      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x1b2>
 8001d6a:	e007      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40012400 	.word	0x40012400
 8001d94:	20000064 	.word	0x20000064
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d040      	beq.n	8001e3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <ADC_Enable+0xac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <ADC_Enable+0xb0>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	0c9b      	lsrs	r3, r3, #18
 8001dd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001dd8:	e002      	b.n	8001de0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f9      	bne.n	8001dda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001de6:	f7ff fcf5 	bl	80017d4 <HAL_GetTick>
 8001dea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001dec:	e01f      	b.n	8001e2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001dee:	f7ff fcf1 	bl	80017d4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d918      	bls.n	8001e2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d011      	beq.n	8001e2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	f043 0210 	orr.w	r2, r3, #16
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1a:	f043 0201 	orr.w	r2, r3, #1
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e007      	b.n	8001e3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1d8      	bne.n	8001dee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000064 	.word	0x20000064
 8001e4c:	431bde83 	.word	0x431bde83

08001e50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d12e      	bne.n	8001ec8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff fcab 	bl	80017d4 <HAL_GetTick>
 8001e7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e80:	e01b      	b.n	8001eba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e82:	f7ff fca7 	bl	80017d4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d914      	bls.n	8001eba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10d      	bne.n	8001eba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	f043 0210 	orr.w	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d0dc      	beq.n	8001e82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <__NVIC_SetPriorityGrouping+0x44>)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	60d3      	str	r3, [r2, #12]
}
 8001f0c:	bf00      	nop
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <__NVIC_GetPriorityGrouping+0x18>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	f003 0307 	and.w	r3, r3, #7
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db0b      	blt.n	8001f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4906      	ldr	r1, [pc, #24]	@ (8001f6c <__NVIC_EnableIRQ+0x34>)
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	2001      	movs	r0, #1
 8001f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	@ (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	@ (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002038:	d301      	bcc.n	800203e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203a:	2301      	movs	r3, #1
 800203c:	e00f      	b.n	800205e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203e:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <SysTick_Config+0x40>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002046:	210f      	movs	r1, #15
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f7ff ff90 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002050:	4b05      	ldr	r3, [pc, #20]	@ (8002068 <SysTick_Config+0x40>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002056:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <SysTick_Config+0x40>)
 8002058:	2207      	movs	r2, #7
 800205a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	e000e010 	.word	0xe000e010

0800206c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ff2d 	bl	8001ed4 <__NVIC_SetPriorityGrouping>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002082:	b580      	push	{r7, lr}
 8002084:	b086      	sub	sp, #24
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
 800208e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002094:	f7ff ff42 	bl	8001f1c <__NVIC_GetPriorityGrouping>
 8002098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68b9      	ldr	r1, [r7, #8]
 800209e:	6978      	ldr	r0, [r7, #20]
 80020a0:	f7ff ff90 	bl	8001fc4 <NVIC_EncodePriority>
 80020a4:	4602      	mov	r2, r0
 80020a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff5f 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ff35 	bl	8001f38 <__NVIC_EnableIRQ>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ffa2 	bl	8002028 <SysTick_Config>
 80020e4:	4603      	mov	r3, r0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d008      	beq.n	8002118 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e020      	b.n	800215a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 020e 	bic.w	r2, r2, #14
 8002126:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002158:	7bfb      	ldrb	r3, [r7, #15]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d005      	beq.n	8002188 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2204      	movs	r2, #4
 8002180:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	e051      	b.n	800222c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 020e 	bic.w	r2, r2, #14
 8002196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a22      	ldr	r2, [pc, #136]	@ (8002238 <HAL_DMA_Abort_IT+0xd4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d029      	beq.n	8002206 <HAL_DMA_Abort_IT+0xa2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a21      	ldr	r2, [pc, #132]	@ (800223c <HAL_DMA_Abort_IT+0xd8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_Abort_IT+0x9e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_DMA_Abort_IT+0xdc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_Abort_IT+0x98>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_DMA_Abort_IT+0xe0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d012      	beq.n	80021f6 <HAL_DMA_Abort_IT+0x92>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_DMA_Abort_IT+0xe4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00a      	beq.n	80021f0 <HAL_DMA_Abort_IT+0x8c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <HAL_DMA_Abort_IT+0xe8>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_DMA_Abort_IT+0x86>
 80021e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80021e8:	e00e      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 80021ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021ee:	e00b      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 80021f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f4:	e008      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 80021f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fa:	e005      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 80021fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002200:	e002      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 8002202:	2310      	movs	r3, #16
 8002204:	e000      	b.n	8002208 <HAL_DMA_Abort_IT+0xa4>
 8002206:	2301      	movs	r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	@ (8002250 <HAL_DMA_Abort_IT+0xec>)
 800220a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
    } 
  }
  return status;
 800222c:	7bfb      	ldrb	r3, [r7, #15]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40020008 	.word	0x40020008
 800223c:	4002001c 	.word	0x4002001c
 8002240:	40020030 	.word	0x40020030
 8002244:	40020044 	.word	0x40020044
 8002248:	40020058 	.word	0x40020058
 800224c:	4002006c 	.word	0x4002006c
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b08b      	sub	sp, #44	@ 0x2c
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e161      	b.n	800252c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002268:	2201      	movs	r2, #1
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8150 	bne.w	8002526 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a97      	ldr	r2, [pc, #604]	@ (80024e8 <HAL_GPIO_Init+0x294>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d05e      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 8002290:	4a95      	ldr	r2, [pc, #596]	@ (80024e8 <HAL_GPIO_Init+0x294>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d875      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 8002296:	4a95      	ldr	r2, [pc, #596]	@ (80024ec <HAL_GPIO_Init+0x298>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d058      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 800229c:	4a93      	ldr	r2, [pc, #588]	@ (80024ec <HAL_GPIO_Init+0x298>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d86f      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022a2:	4a93      	ldr	r2, [pc, #588]	@ (80024f0 <HAL_GPIO_Init+0x29c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d052      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022a8:	4a91      	ldr	r2, [pc, #580]	@ (80024f0 <HAL_GPIO_Init+0x29c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d869      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ae:	4a91      	ldr	r2, [pc, #580]	@ (80024f4 <HAL_GPIO_Init+0x2a0>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d04c      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022b4:	4a8f      	ldr	r2, [pc, #572]	@ (80024f4 <HAL_GPIO_Init+0x2a0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d863      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ba:	4a8f      	ldr	r2, [pc, #572]	@ (80024f8 <HAL_GPIO_Init+0x2a4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d046      	beq.n	800234e <HAL_GPIO_Init+0xfa>
 80022c0:	4a8d      	ldr	r2, [pc, #564]	@ (80024f8 <HAL_GPIO_Init+0x2a4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d85d      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d82a      	bhi.n	8002320 <HAL_GPIO_Init+0xcc>
 80022ca:	2b12      	cmp	r3, #18
 80022cc:	d859      	bhi.n	8002382 <HAL_GPIO_Init+0x12e>
 80022ce:	a201      	add	r2, pc, #4	@ (adr r2, 80022d4 <HAL_GPIO_Init+0x80>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	0800234f 	.word	0x0800234f
 80022d8:	08002329 	.word	0x08002329
 80022dc:	0800233b 	.word	0x0800233b
 80022e0:	0800237d 	.word	0x0800237d
 80022e4:	08002383 	.word	0x08002383
 80022e8:	08002383 	.word	0x08002383
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002383 	.word	0x08002383
 80022f4:	08002383 	.word	0x08002383
 80022f8:	08002383 	.word	0x08002383
 80022fc:	08002383 	.word	0x08002383
 8002300:	08002383 	.word	0x08002383
 8002304:	08002383 	.word	0x08002383
 8002308:	08002383 	.word	0x08002383
 800230c:	08002383 	.word	0x08002383
 8002310:	08002383 	.word	0x08002383
 8002314:	08002383 	.word	0x08002383
 8002318:	08002331 	.word	0x08002331
 800231c:	08002345 	.word	0x08002345
 8002320:	4a76      	ldr	r2, [pc, #472]	@ (80024fc <HAL_GPIO_Init+0x2a8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d013      	beq.n	800234e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002326:	e02c      	b.n	8002382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e029      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	3304      	adds	r3, #4
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e024      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	3308      	adds	r3, #8
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e01f      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	330c      	adds	r3, #12
 800234a:	623b      	str	r3, [r7, #32]
          break;
 800234c:	e01a      	b.n	8002384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002356:	2304      	movs	r3, #4
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e013      	b.n	8002384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002364:	2308      	movs	r3, #8
 8002366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	611a      	str	r2, [r3, #16]
          break;
 800236e:	e009      	b.n	8002384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002370:	2308      	movs	r3, #8
 8002372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	615a      	str	r2, [r3, #20]
          break;
 800237a:	e003      	b.n	8002384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
          break;
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x130>
          break;
 8002382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d801      	bhi.n	800238e <HAL_GPIO_Init+0x13a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	e001      	b.n	8002392 <HAL_GPIO_Init+0x13e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2bff      	cmp	r3, #255	@ 0xff
 8002398:	d802      	bhi.n	80023a0 <HAL_GPIO_Init+0x14c>
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	e002      	b.n	80023a6 <HAL_GPIO_Init+0x152>
 80023a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a2:	3b08      	subs	r3, #8
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	210f      	movs	r1, #15
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80a9 	beq.w	8002526 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d4:	4b4a      	ldr	r3, [pc, #296]	@ (8002500 <HAL_GPIO_Init+0x2ac>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a49      	ldr	r2, [pc, #292]	@ (8002500 <HAL_GPIO_Init+0x2ac>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b47      	ldr	r3, [pc, #284]	@ (8002500 <HAL_GPIO_Init+0x2ac>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023ec:	4a45      	ldr	r2, [pc, #276]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	@ (8002508 <HAL_GPIO_Init+0x2b4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1e0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a3c      	ldr	r2, [pc, #240]	@ (800250c <HAL_GPIO_Init+0x2b8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1dc>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a3b      	ldr	r2, [pc, #236]	@ (8002510 <HAL_GPIO_Init+0x2bc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1d8>
 8002428:	2302      	movs	r3, #2
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 800242c:	2303      	movs	r3, #3
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1e2>
 8002434:	2300      	movs	r3, #0
 8002436:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002446:	492f      	ldr	r1, [pc, #188]	@ (8002504 <HAL_GPIO_Init+0x2b0>)
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002460:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	492b      	ldr	r1, [pc, #172]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800246e:	4b29      	ldr	r3, [pc, #164]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4927      	ldr	r1, [pc, #156]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002478:	4013      	ands	r3, r2
 800247a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002488:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	4921      	ldr	r1, [pc, #132]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002496:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	43db      	mvns	r3, r3
 800249e:	491d      	ldr	r1, [pc, #116]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d006      	beq.n	80024be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b0:	4b18      	ldr	r3, [pc, #96]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4917      	ldr	r1, [pc, #92]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024be:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	4913      	ldr	r1, [pc, #76]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01f      	beq.n	8002518 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	490d      	ldr	r1, [pc, #52]	@ (8002514 <HAL_GPIO_Init+0x2c0>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e01f      	b.n	8002526 <HAL_GPIO_Init+0x2d2>
 80024e6:	bf00      	nop
 80024e8:	10320000 	.word	0x10320000
 80024ec:	10310000 	.word	0x10310000
 80024f0:	10220000 	.word	0x10220000
 80024f4:	10210000 	.word	0x10210000
 80024f8:	10120000 	.word	0x10120000
 80024fc:	10110000 	.word	0x10110000
 8002500:	40021000 	.word	0x40021000
 8002504:	40010000 	.word	0x40010000
 8002508:	40010800 	.word	0x40010800
 800250c:	40010c00 	.word	0x40010c00
 8002510:	40011000 	.word	0x40011000
 8002514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <HAL_GPIO_Init+0x2f4>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	43db      	mvns	r3, r3
 8002520:	4909      	ldr	r1, [pc, #36]	@ (8002548 <HAL_GPIO_Init+0x2f4>)
 8002522:	4013      	ands	r3, r2
 8002524:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	3301      	adds	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	f47f ae96 	bne.w	8002268 <HAL_GPIO_Init+0x14>
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	372c      	adds	r7, #44	@ 0x2c
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40010400 	.word	0x40010400

0800254c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	887b      	ldrh	r3, [r7, #2]
 800255e:	4013      	ands	r3, r2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e001      	b.n	800256e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800256e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
	...

0800257c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e272      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800259c:	4b92      	ldr	r3, [pc, #584]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d00c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025a8:	4b8f      	ldr	r3, [pc, #572]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d112      	bne.n	80025da <HAL_RCC_OscConfig+0x5e>
 80025b4:	4b8c      	ldr	r3, [pc, #560]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b89      	ldr	r3, [pc, #548]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d06c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x12c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d168      	bne.n	80026a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e24c      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x76>
 80025e4:	4b80      	ldr	r3, [pc, #512]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a7f      	ldr	r2, [pc, #508]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e02e      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x98>
 80025fa:	4b7b      	ldr	r3, [pc, #492]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7a      	ldr	r2, [pc, #488]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b78      	ldr	r3, [pc, #480]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a77      	ldr	r2, [pc, #476]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0xbc>
 800261e:	4b72      	ldr	r3, [pc, #456]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a71      	ldr	r2, [pc, #452]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b6f      	ldr	r3, [pc, #444]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a6e      	ldr	r2, [pc, #440]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 8002638:	4b6b      	ldr	r3, [pc, #428]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6a      	ldr	r2, [pc, #424]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b68      	ldr	r3, [pc, #416]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a67      	ldr	r2, [pc, #412]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800264e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7ff f8bc 	bl	80017d4 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7ff f8b8 	bl	80017d4 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e200      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002672:	4b5d      	ldr	r3, [pc, #372]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xe4>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff f8a8 	bl	80017d4 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002688:	f7ff f8a4 	bl	80017d4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	@ 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1ec      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800269a:	4b53      	ldr	r3, [pc, #332]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x10c>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d063      	beq.n	800277e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026b6:	4b4c      	ldr	r3, [pc, #304]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00b      	beq.n	80026da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026c2:	4b49      	ldr	r3, [pc, #292]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d11c      	bne.n	8002708 <HAL_RCC_OscConfig+0x18c>
 80026ce:	4b46      	ldr	r3, [pc, #280]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d116      	bne.n	8002708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026da:	4b43      	ldr	r3, [pc, #268]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_RCC_OscConfig+0x176>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1c0      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4939      	ldr	r1, [pc, #228]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002710:	4b36      	ldr	r3, [pc, #216]	@ (80027ec <HAL_RCC_OscConfig+0x270>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7ff f85d 	bl	80017d4 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff f859 	bl	80017d4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1a1      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	4b2d      	ldr	r3, [pc, #180]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4927      	ldr	r1, [pc, #156]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
 8002750:	e015      	b.n	800277e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002752:	4b26      	ldr	r3, [pc, #152]	@ (80027ec <HAL_RCC_OscConfig+0x270>)
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7ff f83c 	bl	80017d4 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002760:	f7ff f838 	bl	80017d4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e180      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002772:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b00      	cmp	r3, #0
 8002788:	d03a      	beq.n	8002800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d019      	beq.n	80027c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002792:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002794:	2201      	movs	r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7ff f81c 	bl	80017d4 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7ff f818 	bl	80017d4 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e160      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027be:	2001      	movs	r0, #1
 80027c0:	f000 face 	bl	8002d60 <RCC_Delay>
 80027c4:	e01c      	b.n	8002800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7ff f802 	bl	80017d4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d2:	e00f      	b.n	80027f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fffe 	bl	80017d4 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d908      	bls.n	80027f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e146      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	42420000 	.word	0x42420000
 80027f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f4:	4b92      	ldr	r3, [pc, #584]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1e9      	bne.n	80027d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a6 	beq.w	800295a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002812:	4b8b      	ldr	r3, [pc, #556]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	4b88      	ldr	r3, [pc, #544]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4a87      	ldr	r2, [pc, #540]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002828:	61d3      	str	r3, [r2, #28]
 800282a:	4b85      	ldr	r3, [pc, #532]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b82      	ldr	r3, [pc, #520]	@ (8002a44 <HAL_RCC_OscConfig+0x4c8>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d118      	bne.n	8002878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002846:	4b7f      	ldr	r3, [pc, #508]	@ (8002a44 <HAL_RCC_OscConfig+0x4c8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a44 <HAL_RCC_OscConfig+0x4c8>)
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002852:	f7fe ffbf 	bl	80017d4 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800285a:	f7fe ffbb 	bl	80017d4 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b64      	cmp	r3, #100	@ 0x64
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e103      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286c:	4b75      	ldr	r3, [pc, #468]	@ (8002a44 <HAL_RCC_OscConfig+0x4c8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x312>
 8002880:	4b6f      	ldr	r3, [pc, #444]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a6e      	ldr	r2, [pc, #440]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	e02d      	b.n	80028ea <HAL_RCC_OscConfig+0x36e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x334>
 8002896:	4b6a      	ldr	r3, [pc, #424]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	4a69      	ldr	r2, [pc, #420]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6213      	str	r3, [r2, #32]
 80028a2:	4b67      	ldr	r3, [pc, #412]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a66      	ldr	r2, [pc, #408]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	6213      	str	r3, [r2, #32]
 80028ae:	e01c      	b.n	80028ea <HAL_RCC_OscConfig+0x36e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b05      	cmp	r3, #5
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x356>
 80028b8:	4b61      	ldr	r3, [pc, #388]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	4a60      	ldr	r2, [pc, #384]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6213      	str	r3, [r2, #32]
 80028c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e00b      	b.n	80028ea <HAL_RCC_OscConfig+0x36e>
 80028d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4b58      	ldr	r3, [pc, #352]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a57      	ldr	r2, [pc, #348]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d015      	beq.n	800291e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7fe ff6f 	bl	80017d4 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028f8:	e00a      	b.n	8002910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fa:	f7fe ff6b 	bl	80017d4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002908:	4293      	cmp	r3, r2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0b1      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	4b4b      	ldr	r3, [pc, #300]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ee      	beq.n	80028fa <HAL_RCC_OscConfig+0x37e>
 800291c:	e014      	b.n	8002948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe ff59 	bl	80017d4 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe ff55 	bl	80017d4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e09b      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ee      	bne.n	8002926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	4a3b      	ldr	r2, [pc, #236]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8087 	beq.w	8002a72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002964:	4b36      	ldr	r3, [pc, #216]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b08      	cmp	r3, #8
 800296e:	d061      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d146      	bne.n	8002a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b33      	ldr	r3, [pc, #204]	@ (8002a48 <HAL_RCC_OscConfig+0x4cc>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe ff29 	bl	80017d4 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7fe ff25 	bl	80017d4 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e06d      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	4b29      	ldr	r3, [pc, #164]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f0      	bne.n	8002986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ac:	d108      	bne.n	80029c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ae:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	4921      	ldr	r1, [pc, #132]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a19      	ldr	r1, [r3, #32]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	430b      	orrs	r3, r1
 80029d2:	491b      	ldr	r1, [pc, #108]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4cc>)
 80029da:	2201      	movs	r2, #1
 80029dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029de:	f7fe fef9 	bl	80017d4 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e6:	f7fe fef5 	bl	80017d4 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e03d      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x46a>
 8002a04:	e035      	b.n	8002a72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <HAL_RCC_OscConfig+0x4cc>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fee2 	bl	80017d4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fede 	bl	80017d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e026      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x498>
 8002a32:	e01e      	b.n	8002a72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e019      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_RCC_OscConfig+0x500>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0d0      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a94:	4b6a      	ldr	r3, [pc, #424]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d910      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b67      	ldr	r3, [pc, #412]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 0207 	bic.w	r2, r3, #7
 8002aaa:	4965      	ldr	r1, [pc, #404]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b63      	ldr	r3, [pc, #396]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b8      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002adc:	4b59      	ldr	r3, [pc, #356]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ae6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af4:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a52      	ldr	r2, [pc, #328]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002afe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	494d      	ldr	r1, [pc, #308]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d040      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b47      	ldr	r3, [pc, #284]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d115      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d107      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3e:	4b41      	ldr	r3, [pc, #260]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e073      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e06b      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b5e:	4b39      	ldr	r3, [pc, #228]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f023 0203 	bic.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4936      	ldr	r1, [pc, #216]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b70:	f7fe fe30 	bl	80017d4 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b76:	e00a      	b.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe fe2c 	bl	80017d4 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e053      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 020c 	and.w	r2, r3, #12
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1eb      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b27      	ldr	r3, [pc, #156]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d210      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b24      	ldr	r3, [pc, #144]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f023 0207 	bic.w	r2, r3, #7
 8002bb6:	4922      	ldr	r1, [pc, #136]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e032      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b19      	ldr	r3, [pc, #100]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4916      	ldr	r1, [pc, #88]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bfa:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490e      	ldr	r1, [pc, #56]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c0e:	f000 f821 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_RCC_ClockConfig+0x1c4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490a      	ldr	r1, [pc, #40]	@ (8002c48 <HAL_RCC_ClockConfig+0x1c8>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a09      	ldr	r2, [pc, #36]	@ (8002c4c <HAL_RCC_ClockConfig+0x1cc>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <HAL_RCC_ClockConfig+0x1d0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fd8e 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	080044f8 	.word	0x080044f8
 8002c4c:	20000064 	.word	0x20000064
 8002c50:	20000068 	.word	0x20000068

08002c54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d002      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x30>
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_GetSysClockFreq+0x36>
 8002c82:	e027      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x98>)
 8002c86:	613b      	str	r3, [r7, #16]
      break;
 8002c88:	e027      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	0c9b      	lsrs	r3, r3, #18
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	4a17      	ldr	r2, [pc, #92]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0c5b      	lsrs	r3, r3, #17
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	4a11      	ldr	r2, [pc, #68]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb6:	fb03 f202 	mul.w	r2, r3, r2
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e004      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	613b      	str	r3, [r7, #16]
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cd4:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	613b      	str	r3, [r7, #16]
      break;
 8002cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cda:	693b      	ldr	r3, [r7, #16]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	007a1200 	.word	0x007a1200
 8002cf0:	08004510 	.word	0x08004510
 8002cf4:	08004520 	.word	0x08004520
 8002cf8:	003d0900 	.word	0x003d0900

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b02      	ldr	r3, [pc, #8]	@ (8002d0c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20000064 	.word	0x20000064

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff2 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4903      	ldr	r1, [pc, #12]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5ccb      	ldrb	r3, [r1, r3]
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08004508 	.word	0x08004508

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0adb      	lsrs	r3, r3, #11
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4903      	ldr	r1, [pc, #12]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08004508 	.word	0x08004508

08002d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <RCC_Delay+0x34>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <RCC_Delay+0x38>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0a5b      	lsrs	r3, r3, #9
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d7c:	bf00      	nop
  }
  while (Delay --);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <RCC_Delay+0x1c>
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000064 	.word	0x20000064
 8002d98:	10624dd3 	.word	0x10624dd3

08002d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d07d      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	61d3      	str	r3, [r2, #28]
 8002dd4:	4b49      	ldr	r3, [pc, #292]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d118      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df0:	4b43      	ldr	r3, [pc, #268]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a42      	ldr	r2, [pc, #264]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfc:	f7fe fcea 	bl	80017d4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	e008      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e04:	f7fe fce6 	bl	80017d4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	@ 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e06d      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e22:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02e      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d027      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e50:	4b2c      	ldr	r3, [pc, #176]	@ (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e56:	4a29      	ldr	r2, [pc, #164]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d014      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e66:	f7fe fcb5 	bl	80017d4 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fe fcb1 	bl	80017d4 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e036      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e84:	4b1d      	ldr	r3, [pc, #116]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ee      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4917      	ldr	r1, [pc, #92]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	4a13      	ldr	r2, [pc, #76]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	490b      	ldr	r1, [pc, #44]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4904      	ldr	r1, [pc, #16]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	42420440 	.word	0x42420440

08002f08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e042      	b.n	8002fa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fe fb0c 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2224      	movs	r2, #36	@ 0x24
 8002f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fd71 	bl	8003a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d16d      	bne.n	80030a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_UART_Transmit+0x2c>
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e066      	b.n	80030a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2221      	movs	r2, #33	@ 0x21
 8002fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fe6:	f7fe fbf5 	bl	80017d4 <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003000:	d108      	bne.n	8003014 <HAL_UART_Transmit+0x6c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d104      	bne.n	8003014 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e003      	b.n	800301c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800301c:	e02a      	b.n	8003074 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2200      	movs	r2, #0
 8003026:	2180      	movs	r1, #128	@ 0x80
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 faf9 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e036      	b.n	80030a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3302      	adds	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e007      	b.n	8003066 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	781a      	ldrb	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1cf      	bne.n	800301e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2200      	movs	r2, #0
 8003086:	2140      	movs	r1, #64	@ 0x40
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 fac9 	bl	8003620 <UART_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e006      	b.n	80030a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e000      	b.n	80030a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80030a4:	2302      	movs	r3, #2
  }
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3720      	adds	r7, #32
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0ba      	sub	sp, #232	@ 0xe8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80030ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_UART_IRQHandler+0x66>
 8003102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fbd1 	bl	80038b6 <UART_Receive_IT>
      return;
 8003114:	e25b      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 80de 	beq.w	80032dc <HAL_UART_IRQHandler+0x22c>
 8003120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003130:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80d1 	beq.w	80032dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800313a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_UART_IRQHandler+0xae>
 8003146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f043 0201 	orr.w	r2, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_UART_IRQHandler+0xd2>
 800316a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317a:	f043 0202 	orr.w	r2, r3, #2
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0xf6>
 800318e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d011      	beq.n	80031d6 <HAL_UART_IRQHandler+0x126>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d105      	bne.n	80031ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f043 0208 	orr.w	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 81f2 	beq.w	80035c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d008      	beq.n	80031fe <HAL_UART_IRQHandler+0x14e>
 80031ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fb5c 	bl	80038b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_UART_IRQHandler+0x17a>
 8003222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04f      	beq.n	80032ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fa66 	bl	80036fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d041      	beq.n	80032c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3314      	adds	r3, #20
 8003244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800325c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800326a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800326e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1d9      	bne.n	800323e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003296:	4a7e      	ldr	r2, [pc, #504]	@ (8003490 <HAL_UART_IRQHandler+0x3e0>)
 8003298:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe ff60 	bl	8002164 <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00e      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f99c 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00a      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f998 	bl	80035f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e006      	b.n	80032d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f994 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032d6:	e175      	b.n	80035c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	bf00      	nop
    return;
 80032da:	e173      	b.n	80035c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 814f 	bne.w	8003584 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 8148 	beq.w	8003584 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8141 	beq.w	8003584 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80b6 	beq.w	8003494 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8145 	beq.w	80035c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003346:	429a      	cmp	r2, r3
 8003348:	f080 813e 	bcs.w	80035c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003352:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b20      	cmp	r3, #32
 800335c:	f000 8088 	beq.w	8003470 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	330c      	adds	r3, #12
 8003366:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800336e:	e853 3f00 	ldrex	r3, [r3]
 8003372:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800337a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800337e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800338c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003398:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800339c:	e841 2300 	strex	r3, r2, [r1]
 80033a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1d9      	bne.n	8003360 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3314      	adds	r3, #20
 80033cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80033d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80033dc:	e841 2300 	strex	r3, r2, [r1]
 80033e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80033e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e1      	bne.n	80033ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3314      	adds	r3, #20
 80033ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80033f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800340c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800340e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003412:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800341a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e3      	bne.n	80033e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800343e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003440:	f023 0310 	bic.w	r3, r3, #16
 8003444:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	330c      	adds	r3, #12
 800344e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003452:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003454:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e3      	bne.n	800342e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fe3f 	bl	80020ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800347e:	b29b      	uxth	r3, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8bf 	bl	800360a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800348c:	e09c      	b.n	80035c8 <HAL_UART_IRQHandler+0x518>
 800348e:	bf00      	nop
 8003490:	080037c1 	.word	0x080037c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800349c:	b29b      	uxth	r3, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 808e 	beq.w	80035cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8089 	beq.w	80035cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c4:	e853 3f00 	ldrex	r3, [r3]
 80034c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80034de:	647a      	str	r2, [r7, #68]	@ 0x44
 80034e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034e6:	e841 2300 	strex	r3, r2, [r1]
 80034ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e3      	bne.n	80034ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	3314      	adds	r3, #20
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	623b      	str	r3, [r7, #32]
   return(result);
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3314      	adds	r3, #20
 8003512:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003516:	633a      	str	r2, [r7, #48]	@ 0x30
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800351c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351e:	e841 2300 	strex	r3, r2, [r1]
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1e3      	bne.n	80034f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	330c      	adds	r3, #12
 800353e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	e853 3f00 	ldrex	r3, [r3]
 8003546:	60fb      	str	r3, [r7, #12]
   return(result);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0310 	bic.w	r3, r3, #16
 800354e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800355c:	61fa      	str	r2, [r7, #28]
 800355e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	69b9      	ldr	r1, [r7, #24]
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	617b      	str	r3, [r7, #20]
   return(result);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e3      	bne.n	8003538 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f844 	bl	800360a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003582:	e023      	b.n	80035cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003588:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_UART_IRQHandler+0x4f4>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f923 	bl	80037e8 <UART_Transmit_IT>
    return;
 80035a2:	e014      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00e      	beq.n	80035ce <HAL_UART_IRQHandler+0x51e>
 80035b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f962 	bl	8003886 <UART_EndTransmit_IT>
    return;
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
    return;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
      return;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x51e>
      return;
 80035cc:	bf00      	nop
  }
}
 80035ce:	37e8      	adds	r7, #232	@ 0xe8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr

0800360a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b090      	sub	sp, #64	@ 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	4613      	mov	r3, r2
 800362e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003630:	e050      	b.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d04c      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800363c:	2b00      	cmp	r3, #0
 800363e:	d007      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
 8003640:	f7fe f8c8 	bl	80017d4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800364c:	429a      	cmp	r2, r3
 800364e:	d241      	bcs.n	80036d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	330c      	adds	r3, #12
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003662:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	330c      	adds	r3, #12
 800366e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003670:	637a      	str	r2, [r7, #52]	@ 0x34
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800367e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3314      	adds	r3, #20
 80036a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036a4:	623a      	str	r2, [r7, #32]
 80036a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	69f9      	ldr	r1, [r7, #28]
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e5      	bne.n	8003684 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e00f      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4013      	ands	r3, r2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d09f      	beq.n	8003632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3740      	adds	r7, #64	@ 0x40
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b095      	sub	sp, #84	@ 0x54
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	330c      	adds	r3, #12
 800370a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370e:	e853 3f00 	ldrex	r3, [r3]
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800371a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003724:	643a      	str	r2, [r7, #64]	@ 0x40
 8003726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800372a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e5      	bne.n	8003704 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	61fb      	str	r3, [r7, #28]
   return(result);
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	3314      	adds	r3, #20
 8003756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003758:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800375a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800375e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e5      	bne.n	8003738 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	2b01      	cmp	r3, #1
 8003772:	d119      	bne.n	80037a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	60bb      	str	r3, [r7, #8]
   return(result);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f023 0310 	bic.w	r3, r3, #16
 800378a:	647b      	str	r3, [r7, #68]	@ 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003794:	61ba      	str	r2, [r7, #24]
 8003796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6979      	ldr	r1, [r7, #20]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	613b      	str	r3, [r7, #16]
   return(result);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037b6:	bf00      	nop
 80037b8:	3754      	adds	r7, #84	@ 0x54
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr

080037c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff ff0c 	bl	80035f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b21      	cmp	r3, #33	@ 0x21
 80037fa:	d13e      	bne.n	800387a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003804:	d114      	bne.n	8003830 <UART_Transmit_IT+0x48>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d110      	bne.n	8003830 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003822:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	621a      	str	r2, [r3, #32]
 800382e:	e008      	b.n	8003842 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6211      	str	r1, [r2, #32]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29b      	uxth	r3, r3
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4619      	mov	r1, r3
 8003850:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003864:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003874:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	e000      	b.n	800387c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800387a:	2302      	movs	r3, #2
  }
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800389c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fe94 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b08c      	sub	sp, #48	@ 0x30
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b22      	cmp	r3, #34	@ 0x22
 80038c8:	f040 80ae 	bne.w	8003a28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d4:	d117      	bne.n	8003906 <UART_Receive_IT+0x50>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d113      	bne.n	8003906 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	629a      	str	r2, [r3, #40]	@ 0x28
 8003904:	e026      	b.n	8003954 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800390c:	2300      	movs	r3, #0
 800390e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003918:	d007      	beq.n	800392a <UART_Receive_IT+0x74>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <UART_Receive_IT+0x82>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e008      	b.n	800394a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003944:	b2da      	uxtb	r2, r3
 8003946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003948:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29b      	uxth	r3, r3
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	4619      	mov	r1, r3
 8003962:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003964:	2b00      	cmp	r3, #0
 8003966:	d15d      	bne.n	8003a24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0220 	bic.w	r2, r2, #32
 8003976:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003986:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d135      	bne.n	8003a1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	613b      	str	r3, [r7, #16]
   return(result);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f023 0310 	bic.w	r3, r3, #16
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d4:	623a      	str	r2, [r7, #32]
 80039d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	69f9      	ldr	r1, [r7, #28]
 80039da:	6a3a      	ldr	r2, [r7, #32]
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d10a      	bne.n	8003a0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fdf9 	bl	800360a <HAL_UARTEx_RxEventCallback>
 8003a18:	e002      	b.n	8003a20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fde3 	bl	80035e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e002      	b.n	8003a2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3730      	adds	r7, #48	@ 0x30
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003a6e:	f023 030c 	bic.w	r3, r3, #12
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2c      	ldr	r2, [pc, #176]	@ (8003b48 <UART_SetConfig+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d103      	bne.n	8003aa4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7ff f94c 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	60f8      	str	r0, [r7, #12]
 8003aa2:	e002      	b.n	8003aaa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7ff f934 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009a      	lsls	r2, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	4a22      	ldr	r2, [pc, #136]	@ (8003b4c <UART_SetConfig+0x118>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	0119      	lsls	r1, r3, #4
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009a      	lsls	r2, r3, #2
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b4c <UART_SetConfig+0x118>)
 8003ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2064      	movs	r0, #100	@ 0x64
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	@ 0x32
 8003af4:	4a15      	ldr	r2, [pc, #84]	@ (8003b4c <UART_SetConfig+0x118>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b00:	4419      	add	r1, r3
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b18:	4b0c      	ldr	r3, [pc, #48]	@ (8003b4c <UART_SetConfig+0x118>)
 8003b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2064      	movs	r0, #100	@ 0x64
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	3332      	adds	r3, #50	@ 0x32
 8003b2c:	4a07      	ldr	r2, [pc, #28]	@ (8003b4c <UART_SetConfig+0x118>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	440a      	add	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	51eb851f 	.word	0x51eb851f

08003b50 <siprintf>:
 8003b50:	b40e      	push	{r1, r2, r3}
 8003b52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b56:	b500      	push	{lr}
 8003b58:	b09c      	sub	sp, #112	@ 0x70
 8003b5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b5c:	9002      	str	r0, [sp, #8]
 8003b5e:	9006      	str	r0, [sp, #24]
 8003b60:	9107      	str	r1, [sp, #28]
 8003b62:	9104      	str	r1, [sp, #16]
 8003b64:	4808      	ldr	r0, [pc, #32]	@ (8003b88 <siprintf+0x38>)
 8003b66:	4909      	ldr	r1, [pc, #36]	@ (8003b8c <siprintf+0x3c>)
 8003b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b6c:	9105      	str	r1, [sp, #20]
 8003b6e:	6800      	ldr	r0, [r0, #0]
 8003b70:	a902      	add	r1, sp, #8
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	f000 f9a2 	bl	8003ebc <_svfiprintf_r>
 8003b78:	2200      	movs	r2, #0
 8003b7a:	9b02      	ldr	r3, [sp, #8]
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	b01c      	add	sp, #112	@ 0x70
 8003b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b84:	b003      	add	sp, #12
 8003b86:	4770      	bx	lr
 8003b88:	20000070 	.word	0x20000070
 8003b8c:	ffff0208 	.word	0xffff0208

08003b90 <memset>:
 8003b90:	4603      	mov	r3, r0
 8003b92:	4402      	add	r2, r0
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d100      	bne.n	8003b9a <memset+0xa>
 8003b98:	4770      	bx	lr
 8003b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9e:	e7f9      	b.n	8003b94 <memset+0x4>

08003ba0 <strcat>:
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	7814      	ldrb	r4, [r2, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	3201      	adds	r2, #1
 8003baa:	2c00      	cmp	r4, #0
 8003bac:	d1fa      	bne.n	8003ba4 <strcat+0x4>
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bb8:	2a00      	cmp	r2, #0
 8003bba:	d1f9      	bne.n	8003bb0 <strcat+0x10>
 8003bbc:	bd10      	pop	{r4, pc}
	...

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	@ (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000070 	.word	0x20000070

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	2600      	movs	r6, #0
 8003bd0:	4d0c      	ldr	r5, [pc, #48]	@ (8003c04 <__libc_init_array+0x38>)
 8003bd2:	4c0d      	ldr	r4, [pc, #52]	@ (8003c08 <__libc_init_array+0x3c>)
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	f000 fc78 	bl	80044d0 <_init>
 8003be0:	2600      	movs	r6, #0
 8003be2:	4d0a      	ldr	r5, [pc, #40]	@ (8003c0c <__libc_init_array+0x40>)
 8003be4:	4c0a      	ldr	r4, [pc, #40]	@ (8003c10 <__libc_init_array+0x44>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	08004560 	.word	0x08004560
 8003c08:	08004560 	.word	0x08004560
 8003c0c:	08004560 	.word	0x08004560
 8003c10:	08004564 	.word	0x08004564

08003c14 <__retarget_lock_acquire_recursive>:
 8003c14:	4770      	bx	lr

08003c16 <__retarget_lock_release_recursive>:
 8003c16:	4770      	bx	lr

08003c18 <_free_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	d040      	beq.n	8003ca2 <_free_r+0x8a>
 8003c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c24:	1f0c      	subs	r4, r1, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bfb8      	it	lt
 8003c2a:	18e4      	addlt	r4, r4, r3
 8003c2c:	f000 f8de 	bl	8003dec <__malloc_lock>
 8003c30:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca4 <_free_r+0x8c>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	b933      	cbnz	r3, 8003c44 <_free_r+0x2c>
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	6014      	str	r4, [r2, #0]
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c40:	f000 b8da 	b.w	8003df8 <__malloc_unlock>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d908      	bls.n	8003c5a <_free_r+0x42>
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	1821      	adds	r1, r4, r0
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf01      	itttt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	1809      	addeq	r1, r1, r0
 8003c56:	6021      	streq	r1, [r4, #0]
 8003c58:	e7ed      	b.n	8003c36 <_free_r+0x1e>
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	b10b      	cbz	r3, 8003c64 <_free_r+0x4c>
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	d9fa      	bls.n	8003c5a <_free_r+0x42>
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	1850      	adds	r0, r2, r1
 8003c68:	42a0      	cmp	r0, r4
 8003c6a:	d10b      	bne.n	8003c84 <_free_r+0x6c>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	4401      	add	r1, r0
 8003c70:	1850      	adds	r0, r2, r1
 8003c72:	4283      	cmp	r3, r0
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	d1e0      	bne.n	8003c3a <_free_r+0x22>
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4408      	add	r0, r1
 8003c7e:	6010      	str	r0, [r2, #0]
 8003c80:	6053      	str	r3, [r2, #4]
 8003c82:	e7da      	b.n	8003c3a <_free_r+0x22>
 8003c84:	d902      	bls.n	8003c8c <_free_r+0x74>
 8003c86:	230c      	movs	r3, #12
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	e7d6      	b.n	8003c3a <_free_r+0x22>
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	1821      	adds	r1, r4, r0
 8003c90:	428b      	cmp	r3, r1
 8003c92:	bf01      	itttt	eq
 8003c94:	6819      	ldreq	r1, [r3, #0]
 8003c96:	685b      	ldreq	r3, [r3, #4]
 8003c98:	1809      	addeq	r1, r1, r0
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	6054      	str	r4, [r2, #4]
 8003ca0:	e7cb      	b.n	8003c3a <_free_r+0x22>
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	20000318 	.word	0x20000318

08003ca8 <sbrk_aligned>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4e0f      	ldr	r6, [pc, #60]	@ (8003ce8 <sbrk_aligned+0x40>)
 8003cac:	460c      	mov	r4, r1
 8003cae:	6831      	ldr	r1, [r6, #0]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	b911      	cbnz	r1, 8003cba <sbrk_aligned+0x12>
 8003cb4:	f000 fbaa 	bl	800440c <_sbrk_r>
 8003cb8:	6030      	str	r0, [r6, #0]
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f000 fba5 	bl	800440c <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d103      	bne.n	8003cce <sbrk_aligned+0x26>
 8003cc6:	f04f 34ff 	mov.w	r4, #4294967295
 8003cca:	4620      	mov	r0, r4
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}
 8003cce:	1cc4      	adds	r4, r0, #3
 8003cd0:	f024 0403 	bic.w	r4, r4, #3
 8003cd4:	42a0      	cmp	r0, r4
 8003cd6:	d0f8      	beq.n	8003cca <sbrk_aligned+0x22>
 8003cd8:	1a21      	subs	r1, r4, r0
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 fb96 	bl	800440c <_sbrk_r>
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1f2      	bne.n	8003cca <sbrk_aligned+0x22>
 8003ce4:	e7ef      	b.n	8003cc6 <sbrk_aligned+0x1e>
 8003ce6:	bf00      	nop
 8003ce8:	20000314 	.word	0x20000314

08003cec <_malloc_r>:
 8003cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cf0:	1ccd      	adds	r5, r1, #3
 8003cf2:	f025 0503 	bic.w	r5, r5, #3
 8003cf6:	3508      	adds	r5, #8
 8003cf8:	2d0c      	cmp	r5, #12
 8003cfa:	bf38      	it	cc
 8003cfc:	250c      	movcc	r5, #12
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	4606      	mov	r6, r0
 8003d02:	db01      	blt.n	8003d08 <_malloc_r+0x1c>
 8003d04:	42a9      	cmp	r1, r5
 8003d06:	d904      	bls.n	8003d12 <_malloc_r+0x26>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	6033      	str	r3, [r6, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003de8 <_malloc_r+0xfc>
 8003d16:	f000 f869 	bl	8003dec <__malloc_lock>
 8003d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1e:	461c      	mov	r4, r3
 8003d20:	bb44      	cbnz	r4, 8003d74 <_malloc_r+0x88>
 8003d22:	4629      	mov	r1, r5
 8003d24:	4630      	mov	r0, r6
 8003d26:	f7ff ffbf 	bl	8003ca8 <sbrk_aligned>
 8003d2a:	1c43      	adds	r3, r0, #1
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	d158      	bne.n	8003de2 <_malloc_r+0xf6>
 8003d30:	f8d8 4000 	ldr.w	r4, [r8]
 8003d34:	4627      	mov	r7, r4
 8003d36:	2f00      	cmp	r7, #0
 8003d38:	d143      	bne.n	8003dc2 <_malloc_r+0xd6>
 8003d3a:	2c00      	cmp	r4, #0
 8003d3c:	d04b      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	4639      	mov	r1, r7
 8003d42:	4630      	mov	r0, r6
 8003d44:	eb04 0903 	add.w	r9, r4, r3
 8003d48:	f000 fb60 	bl	800440c <_sbrk_r>
 8003d4c:	4581      	cmp	r9, r0
 8003d4e:	d142      	bne.n	8003dd6 <_malloc_r+0xea>
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	4630      	mov	r0, r6
 8003d54:	1a6d      	subs	r5, r5, r1
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7ff ffa6 	bl	8003ca8 <sbrk_aligned>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d03a      	beq.n	8003dd6 <_malloc_r+0xea>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	442b      	add	r3, r5
 8003d64:	6023      	str	r3, [r4, #0]
 8003d66:	f8d8 3000 	ldr.w	r3, [r8]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	bb62      	cbnz	r2, 8003dc8 <_malloc_r+0xdc>
 8003d6e:	f8c8 7000 	str.w	r7, [r8]
 8003d72:	e00f      	b.n	8003d94 <_malloc_r+0xa8>
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	1b52      	subs	r2, r2, r5
 8003d78:	d420      	bmi.n	8003dbc <_malloc_r+0xd0>
 8003d7a:	2a0b      	cmp	r2, #11
 8003d7c:	d917      	bls.n	8003dae <_malloc_r+0xc2>
 8003d7e:	1961      	adds	r1, r4, r5
 8003d80:	42a3      	cmp	r3, r4
 8003d82:	6025      	str	r5, [r4, #0]
 8003d84:	bf18      	it	ne
 8003d86:	6059      	strne	r1, [r3, #4]
 8003d88:	6863      	ldr	r3, [r4, #4]
 8003d8a:	bf08      	it	eq
 8003d8c:	f8c8 1000 	streq.w	r1, [r8]
 8003d90:	5162      	str	r2, [r4, r5]
 8003d92:	604b      	str	r3, [r1, #4]
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f82f 	bl	8003df8 <__malloc_unlock>
 8003d9a:	f104 000b 	add.w	r0, r4, #11
 8003d9e:	1d23      	adds	r3, r4, #4
 8003da0:	f020 0007 	bic.w	r0, r0, #7
 8003da4:	1ac2      	subs	r2, r0, r3
 8003da6:	bf1c      	itt	ne
 8003da8:	1a1b      	subne	r3, r3, r0
 8003daa:	50a3      	strne	r3, [r4, r2]
 8003dac:	e7af      	b.n	8003d0e <_malloc_r+0x22>
 8003dae:	6862      	ldr	r2, [r4, #4]
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	bf0c      	ite	eq
 8003db4:	f8c8 2000 	streq.w	r2, [r8]
 8003db8:	605a      	strne	r2, [r3, #4]
 8003dba:	e7eb      	b.n	8003d94 <_malloc_r+0xa8>
 8003dbc:	4623      	mov	r3, r4
 8003dbe:	6864      	ldr	r4, [r4, #4]
 8003dc0:	e7ae      	b.n	8003d20 <_malloc_r+0x34>
 8003dc2:	463c      	mov	r4, r7
 8003dc4:	687f      	ldr	r7, [r7, #4]
 8003dc6:	e7b6      	b.n	8003d36 <_malloc_r+0x4a>
 8003dc8:	461a      	mov	r2, r3
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	42a3      	cmp	r3, r4
 8003dce:	d1fb      	bne.n	8003dc8 <_malloc_r+0xdc>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6053      	str	r3, [r2, #4]
 8003dd4:	e7de      	b.n	8003d94 <_malloc_r+0xa8>
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	4630      	mov	r0, r6
 8003dda:	6033      	str	r3, [r6, #0]
 8003ddc:	f000 f80c 	bl	8003df8 <__malloc_unlock>
 8003de0:	e794      	b.n	8003d0c <_malloc_r+0x20>
 8003de2:	6005      	str	r5, [r0, #0]
 8003de4:	e7d6      	b.n	8003d94 <_malloc_r+0xa8>
 8003de6:	bf00      	nop
 8003de8:	20000318 	.word	0x20000318

08003dec <__malloc_lock>:
 8003dec:	4801      	ldr	r0, [pc, #4]	@ (8003df4 <__malloc_lock+0x8>)
 8003dee:	f7ff bf11 	b.w	8003c14 <__retarget_lock_acquire_recursive>
 8003df2:	bf00      	nop
 8003df4:	20000310 	.word	0x20000310

08003df8 <__malloc_unlock>:
 8003df8:	4801      	ldr	r0, [pc, #4]	@ (8003e00 <__malloc_unlock+0x8>)
 8003dfa:	f7ff bf0c 	b.w	8003c16 <__retarget_lock_release_recursive>
 8003dfe:	bf00      	nop
 8003e00:	20000310 	.word	0x20000310

08003e04 <__ssputs_r>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	461f      	mov	r7, r3
 8003e0a:	688e      	ldr	r6, [r1, #8]
 8003e0c:	4682      	mov	sl, r0
 8003e0e:	42be      	cmp	r6, r7
 8003e10:	460c      	mov	r4, r1
 8003e12:	4690      	mov	r8, r2
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	d82d      	bhi.n	8003e74 <__ssputs_r+0x70>
 8003e18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e20:	d026      	beq.n	8003e70 <__ssputs_r+0x6c>
 8003e22:	6965      	ldr	r5, [r4, #20]
 8003e24:	6909      	ldr	r1, [r1, #16]
 8003e26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e2a:	eba3 0901 	sub.w	r9, r3, r1
 8003e2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e32:	1c7b      	adds	r3, r7, #1
 8003e34:	444b      	add	r3, r9
 8003e36:	106d      	asrs	r5, r5, #1
 8003e38:	429d      	cmp	r5, r3
 8003e3a:	bf38      	it	cc
 8003e3c:	461d      	movcc	r5, r3
 8003e3e:	0553      	lsls	r3, r2, #21
 8003e40:	d527      	bpl.n	8003e92 <__ssputs_r+0x8e>
 8003e42:	4629      	mov	r1, r5
 8003e44:	f7ff ff52 	bl	8003cec <_malloc_r>
 8003e48:	4606      	mov	r6, r0
 8003e4a:	b360      	cbz	r0, 8003ea6 <__ssputs_r+0xa2>
 8003e4c:	464a      	mov	r2, r9
 8003e4e:	6921      	ldr	r1, [r4, #16]
 8003e50:	f000 fafa 	bl	8004448 <memcpy>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	6126      	str	r6, [r4, #16]
 8003e62:	444e      	add	r6, r9
 8003e64:	6026      	str	r6, [r4, #0]
 8003e66:	463e      	mov	r6, r7
 8003e68:	6165      	str	r5, [r4, #20]
 8003e6a:	eba5 0509 	sub.w	r5, r5, r9
 8003e6e:	60a5      	str	r5, [r4, #8]
 8003e70:	42be      	cmp	r6, r7
 8003e72:	d900      	bls.n	8003e76 <__ssputs_r+0x72>
 8003e74:	463e      	mov	r6, r7
 8003e76:	4632      	mov	r2, r6
 8003e78:	4641      	mov	r1, r8
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	f000 faac 	bl	80043d8 <memmove>
 8003e80:	2000      	movs	r0, #0
 8003e82:	68a3      	ldr	r3, [r4, #8]
 8003e84:	1b9b      	subs	r3, r3, r6
 8003e86:	60a3      	str	r3, [r4, #8]
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	4433      	add	r3, r6
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e92:	462a      	mov	r2, r5
 8003e94:	f000 fae6 	bl	8004464 <_realloc_r>
 8003e98:	4606      	mov	r6, r0
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d1e0      	bne.n	8003e60 <__ssputs_r+0x5c>
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	f7ff feb9 	bl	8003c18 <_free_r>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	f8ca 3000 	str.w	r3, [sl]
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eb6:	81a3      	strh	r3, [r4, #12]
 8003eb8:	e7e9      	b.n	8003e8e <__ssputs_r+0x8a>
	...

08003ebc <_svfiprintf_r>:
 8003ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	898b      	ldrh	r3, [r1, #12]
 8003ec4:	4607      	mov	r7, r0
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	460d      	mov	r5, r1
 8003eca:	4614      	mov	r4, r2
 8003ecc:	b09d      	sub	sp, #116	@ 0x74
 8003ece:	d510      	bpl.n	8003ef2 <_svfiprintf_r+0x36>
 8003ed0:	690b      	ldr	r3, [r1, #16]
 8003ed2:	b973      	cbnz	r3, 8003ef2 <_svfiprintf_r+0x36>
 8003ed4:	2140      	movs	r1, #64	@ 0x40
 8003ed6:	f7ff ff09 	bl	8003cec <_malloc_r>
 8003eda:	6028      	str	r0, [r5, #0]
 8003edc:	6128      	str	r0, [r5, #16]
 8003ede:	b930      	cbnz	r0, 8003eee <_svfiprintf_r+0x32>
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	b01d      	add	sp, #116	@ 0x74
 8003eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eee:	2340      	movs	r3, #64	@ 0x40
 8003ef0:	616b      	str	r3, [r5, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003efc:	2330      	movs	r3, #48	@ 0x30
 8003efe:	f04f 0901 	mov.w	r9, #1
 8003f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f06:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80040a0 <_svfiprintf_r+0x1e4>
 8003f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f0e:	4623      	mov	r3, r4
 8003f10:	469a      	mov	sl, r3
 8003f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f16:	b10a      	cbz	r2, 8003f1c <_svfiprintf_r+0x60>
 8003f18:	2a25      	cmp	r2, #37	@ 0x25
 8003f1a:	d1f9      	bne.n	8003f10 <_svfiprintf_r+0x54>
 8003f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8003f20:	d00b      	beq.n	8003f3a <_svfiprintf_r+0x7e>
 8003f22:	465b      	mov	r3, fp
 8003f24:	4622      	mov	r2, r4
 8003f26:	4629      	mov	r1, r5
 8003f28:	4638      	mov	r0, r7
 8003f2a:	f7ff ff6b 	bl	8003e04 <__ssputs_r>
 8003f2e:	3001      	adds	r0, #1
 8003f30:	f000 80a7 	beq.w	8004082 <_svfiprintf_r+0x1c6>
 8003f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f36:	445a      	add	r2, fp
 8003f38:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 809f 	beq.w	8004082 <_svfiprintf_r+0x1c6>
 8003f44:	2300      	movs	r3, #0
 8003f46:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f4e:	f10a 0a01 	add.w	sl, sl, #1
 8003f52:	9304      	str	r3, [sp, #16]
 8003f54:	9307      	str	r3, [sp, #28]
 8003f56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f5c:	4654      	mov	r4, sl
 8003f5e:	2205      	movs	r2, #5
 8003f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f64:	484e      	ldr	r0, [pc, #312]	@ (80040a0 <_svfiprintf_r+0x1e4>)
 8003f66:	f000 fa61 	bl	800442c <memchr>
 8003f6a:	9a04      	ldr	r2, [sp, #16]
 8003f6c:	b9d8      	cbnz	r0, 8003fa6 <_svfiprintf_r+0xea>
 8003f6e:	06d0      	lsls	r0, r2, #27
 8003f70:	bf44      	itt	mi
 8003f72:	2320      	movmi	r3, #32
 8003f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f78:	0711      	lsls	r1, r2, #28
 8003f7a:	bf44      	itt	mi
 8003f7c:	232b      	movmi	r3, #43	@ 0x2b
 8003f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f82:	f89a 3000 	ldrb.w	r3, [sl]
 8003f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f88:	d015      	beq.n	8003fb6 <_svfiprintf_r+0xfa>
 8003f8a:	4654      	mov	r4, sl
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f04f 0c0a 	mov.w	ip, #10
 8003f92:	9a07      	ldr	r2, [sp, #28]
 8003f94:	4621      	mov	r1, r4
 8003f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f9a:	3b30      	subs	r3, #48	@ 0x30
 8003f9c:	2b09      	cmp	r3, #9
 8003f9e:	d94b      	bls.n	8004038 <_svfiprintf_r+0x17c>
 8003fa0:	b1b0      	cbz	r0, 8003fd0 <_svfiprintf_r+0x114>
 8003fa2:	9207      	str	r2, [sp, #28]
 8003fa4:	e014      	b.n	8003fd0 <_svfiprintf_r+0x114>
 8003fa6:	eba0 0308 	sub.w	r3, r0, r8
 8003faa:	fa09 f303 	lsl.w	r3, r9, r3
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	46a2      	mov	sl, r4
 8003fb2:	9304      	str	r3, [sp, #16]
 8003fb4:	e7d2      	b.n	8003f5c <_svfiprintf_r+0xa0>
 8003fb6:	9b03      	ldr	r3, [sp, #12]
 8003fb8:	1d19      	adds	r1, r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	9103      	str	r1, [sp, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bfbb      	ittet	lt
 8003fc2:	425b      	neglt	r3, r3
 8003fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8003fc8:	9307      	strge	r3, [sp, #28]
 8003fca:	9307      	strlt	r3, [sp, #28]
 8003fcc:	bfb8      	it	lt
 8003fce:	9204      	strlt	r2, [sp, #16]
 8003fd0:	7823      	ldrb	r3, [r4, #0]
 8003fd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fd4:	d10a      	bne.n	8003fec <_svfiprintf_r+0x130>
 8003fd6:	7863      	ldrb	r3, [r4, #1]
 8003fd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fda:	d132      	bne.n	8004042 <_svfiprintf_r+0x186>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	3402      	adds	r4, #2
 8003fe0:	1d1a      	adds	r2, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	9203      	str	r2, [sp, #12]
 8003fe6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80040a4 <_svfiprintf_r+0x1e8>
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	4650      	mov	r0, sl
 8003ff4:	7821      	ldrb	r1, [r4, #0]
 8003ff6:	f000 fa19 	bl	800442c <memchr>
 8003ffa:	b138      	cbz	r0, 800400c <_svfiprintf_r+0x150>
 8003ffc:	2240      	movs	r2, #64	@ 0x40
 8003ffe:	9b04      	ldr	r3, [sp, #16]
 8004000:	eba0 000a 	sub.w	r0, r0, sl
 8004004:	4082      	lsls	r2, r0
 8004006:	4313      	orrs	r3, r2
 8004008:	3401      	adds	r4, #1
 800400a:	9304      	str	r3, [sp, #16]
 800400c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004010:	2206      	movs	r2, #6
 8004012:	4825      	ldr	r0, [pc, #148]	@ (80040a8 <_svfiprintf_r+0x1ec>)
 8004014:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004018:	f000 fa08 	bl	800442c <memchr>
 800401c:	2800      	cmp	r0, #0
 800401e:	d036      	beq.n	800408e <_svfiprintf_r+0x1d2>
 8004020:	4b22      	ldr	r3, [pc, #136]	@ (80040ac <_svfiprintf_r+0x1f0>)
 8004022:	bb1b      	cbnz	r3, 800406c <_svfiprintf_r+0x1b0>
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	3307      	adds	r3, #7
 8004028:	f023 0307 	bic.w	r3, r3, #7
 800402c:	3308      	adds	r3, #8
 800402e:	9303      	str	r3, [sp, #12]
 8004030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004032:	4433      	add	r3, r6
 8004034:	9309      	str	r3, [sp, #36]	@ 0x24
 8004036:	e76a      	b.n	8003f0e <_svfiprintf_r+0x52>
 8004038:	460c      	mov	r4, r1
 800403a:	2001      	movs	r0, #1
 800403c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004040:	e7a8      	b.n	8003f94 <_svfiprintf_r+0xd8>
 8004042:	2300      	movs	r3, #0
 8004044:	f04f 0c0a 	mov.w	ip, #10
 8004048:	4619      	mov	r1, r3
 800404a:	3401      	adds	r4, #1
 800404c:	9305      	str	r3, [sp, #20]
 800404e:	4620      	mov	r0, r4
 8004050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004054:	3a30      	subs	r2, #48	@ 0x30
 8004056:	2a09      	cmp	r2, #9
 8004058:	d903      	bls.n	8004062 <_svfiprintf_r+0x1a6>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0c6      	beq.n	8003fec <_svfiprintf_r+0x130>
 800405e:	9105      	str	r1, [sp, #20]
 8004060:	e7c4      	b.n	8003fec <_svfiprintf_r+0x130>
 8004062:	4604      	mov	r4, r0
 8004064:	2301      	movs	r3, #1
 8004066:	fb0c 2101 	mla	r1, ip, r1, r2
 800406a:	e7f0      	b.n	800404e <_svfiprintf_r+0x192>
 800406c:	ab03      	add	r3, sp, #12
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	462a      	mov	r2, r5
 8004072:	4638      	mov	r0, r7
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <_svfiprintf_r+0x1f4>)
 8004076:	a904      	add	r1, sp, #16
 8004078:	f3af 8000 	nop.w
 800407c:	1c42      	adds	r2, r0, #1
 800407e:	4606      	mov	r6, r0
 8004080:	d1d6      	bne.n	8004030 <_svfiprintf_r+0x174>
 8004082:	89ab      	ldrh	r3, [r5, #12]
 8004084:	065b      	lsls	r3, r3, #25
 8004086:	f53f af2d 	bmi.w	8003ee4 <_svfiprintf_r+0x28>
 800408a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800408c:	e72c      	b.n	8003ee8 <_svfiprintf_r+0x2c>
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4638      	mov	r0, r7
 8004096:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <_svfiprintf_r+0x1f4>)
 8004098:	a904      	add	r1, sp, #16
 800409a:	f000 f87d 	bl	8004198 <_printf_i>
 800409e:	e7ed      	b.n	800407c <_svfiprintf_r+0x1c0>
 80040a0:	08004522 	.word	0x08004522
 80040a4:	08004528 	.word	0x08004528
 80040a8:	0800452c 	.word	0x0800452c
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e05 	.word	0x08003e05

080040b4 <_printf_common>:
 80040b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b8:	4616      	mov	r6, r2
 80040ba:	4698      	mov	r8, r3
 80040bc:	688a      	ldr	r2, [r1, #8]
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	4607      	mov	r7, r0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	bfb8      	it	lt
 80040c6:	4613      	movlt	r3, r2
 80040c8:	6033      	str	r3, [r6, #0]
 80040ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040ce:	460c      	mov	r4, r1
 80040d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040d4:	b10a      	cbz	r2, 80040da <_printf_common+0x26>
 80040d6:	3301      	adds	r3, #1
 80040d8:	6033      	str	r3, [r6, #0]
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	0699      	lsls	r1, r3, #26
 80040de:	bf42      	ittt	mi
 80040e0:	6833      	ldrmi	r3, [r6, #0]
 80040e2:	3302      	addmi	r3, #2
 80040e4:	6033      	strmi	r3, [r6, #0]
 80040e6:	6825      	ldr	r5, [r4, #0]
 80040e8:	f015 0506 	ands.w	r5, r5, #6
 80040ec:	d106      	bne.n	80040fc <_printf_common+0x48>
 80040ee:	f104 0a19 	add.w	sl, r4, #25
 80040f2:	68e3      	ldr	r3, [r4, #12]
 80040f4:	6832      	ldr	r2, [r6, #0]
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	dc2b      	bgt.n	8004154 <_printf_common+0xa0>
 80040fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004100:	6822      	ldr	r2, [r4, #0]
 8004102:	3b00      	subs	r3, #0
 8004104:	bf18      	it	ne
 8004106:	2301      	movne	r3, #1
 8004108:	0692      	lsls	r2, r2, #26
 800410a:	d430      	bmi.n	800416e <_printf_common+0xba>
 800410c:	4641      	mov	r1, r8
 800410e:	4638      	mov	r0, r7
 8004110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004114:	47c8      	blx	r9
 8004116:	3001      	adds	r0, #1
 8004118:	d023      	beq.n	8004162 <_printf_common+0xae>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	6922      	ldr	r2, [r4, #16]
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf14      	ite	ne
 8004126:	2500      	movne	r5, #0
 8004128:	6833      	ldreq	r3, [r6, #0]
 800412a:	f04f 0600 	mov.w	r6, #0
 800412e:	bf08      	it	eq
 8004130:	68e5      	ldreq	r5, [r4, #12]
 8004132:	f104 041a 	add.w	r4, r4, #26
 8004136:	bf08      	it	eq
 8004138:	1aed      	subeq	r5, r5, r3
 800413a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800413e:	bf08      	it	eq
 8004140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004144:	4293      	cmp	r3, r2
 8004146:	bfc4      	itt	gt
 8004148:	1a9b      	subgt	r3, r3, r2
 800414a:	18ed      	addgt	r5, r5, r3
 800414c:	42b5      	cmp	r5, r6
 800414e:	d11a      	bne.n	8004186 <_printf_common+0xd2>
 8004150:	2000      	movs	r0, #0
 8004152:	e008      	b.n	8004166 <_printf_common+0xb2>
 8004154:	2301      	movs	r3, #1
 8004156:	4652      	mov	r2, sl
 8004158:	4641      	mov	r1, r8
 800415a:	4638      	mov	r0, r7
 800415c:	47c8      	blx	r9
 800415e:	3001      	adds	r0, #1
 8004160:	d103      	bne.n	800416a <_printf_common+0xb6>
 8004162:	f04f 30ff 	mov.w	r0, #4294967295
 8004166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800416a:	3501      	adds	r5, #1
 800416c:	e7c1      	b.n	80040f2 <_printf_common+0x3e>
 800416e:	2030      	movs	r0, #48	@ 0x30
 8004170:	18e1      	adds	r1, r4, r3
 8004172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800417c:	4422      	add	r2, r4
 800417e:	3302      	adds	r3, #2
 8004180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004184:	e7c2      	b.n	800410c <_printf_common+0x58>
 8004186:	2301      	movs	r3, #1
 8004188:	4622      	mov	r2, r4
 800418a:	4641      	mov	r1, r8
 800418c:	4638      	mov	r0, r7
 800418e:	47c8      	blx	r9
 8004190:	3001      	adds	r0, #1
 8004192:	d0e6      	beq.n	8004162 <_printf_common+0xae>
 8004194:	3601      	adds	r6, #1
 8004196:	e7d9      	b.n	800414c <_printf_common+0x98>

08004198 <_printf_i>:
 8004198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800419c:	7e0f      	ldrb	r7, [r1, #24]
 800419e:	4691      	mov	r9, r2
 80041a0:	2f78      	cmp	r7, #120	@ 0x78
 80041a2:	4680      	mov	r8, r0
 80041a4:	460c      	mov	r4, r1
 80041a6:	469a      	mov	sl, r3
 80041a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ae:	d807      	bhi.n	80041c0 <_printf_i+0x28>
 80041b0:	2f62      	cmp	r7, #98	@ 0x62
 80041b2:	d80a      	bhi.n	80041ca <_printf_i+0x32>
 80041b4:	2f00      	cmp	r7, #0
 80041b6:	f000 80d3 	beq.w	8004360 <_printf_i+0x1c8>
 80041ba:	2f58      	cmp	r7, #88	@ 0x58
 80041bc:	f000 80ba 	beq.w	8004334 <_printf_i+0x19c>
 80041c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041c8:	e03a      	b.n	8004240 <_printf_i+0xa8>
 80041ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041ce:	2b15      	cmp	r3, #21
 80041d0:	d8f6      	bhi.n	80041c0 <_printf_i+0x28>
 80041d2:	a101      	add	r1, pc, #4	@ (adr r1, 80041d8 <_printf_i+0x40>)
 80041d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041d8:	08004231 	.word	0x08004231
 80041dc:	08004245 	.word	0x08004245
 80041e0:	080041c1 	.word	0x080041c1
 80041e4:	080041c1 	.word	0x080041c1
 80041e8:	080041c1 	.word	0x080041c1
 80041ec:	080041c1 	.word	0x080041c1
 80041f0:	08004245 	.word	0x08004245
 80041f4:	080041c1 	.word	0x080041c1
 80041f8:	080041c1 	.word	0x080041c1
 80041fc:	080041c1 	.word	0x080041c1
 8004200:	080041c1 	.word	0x080041c1
 8004204:	08004347 	.word	0x08004347
 8004208:	0800426f 	.word	0x0800426f
 800420c:	08004301 	.word	0x08004301
 8004210:	080041c1 	.word	0x080041c1
 8004214:	080041c1 	.word	0x080041c1
 8004218:	08004369 	.word	0x08004369
 800421c:	080041c1 	.word	0x080041c1
 8004220:	0800426f 	.word	0x0800426f
 8004224:	080041c1 	.word	0x080041c1
 8004228:	080041c1 	.word	0x080041c1
 800422c:	08004309 	.word	0x08004309
 8004230:	6833      	ldr	r3, [r6, #0]
 8004232:	1d1a      	adds	r2, r3, #4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6032      	str	r2, [r6, #0]
 8004238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800423c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004240:	2301      	movs	r3, #1
 8004242:	e09e      	b.n	8004382 <_printf_i+0x1ea>
 8004244:	6833      	ldr	r3, [r6, #0]
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	1d19      	adds	r1, r3, #4
 800424a:	6031      	str	r1, [r6, #0]
 800424c:	0606      	lsls	r6, r0, #24
 800424e:	d501      	bpl.n	8004254 <_printf_i+0xbc>
 8004250:	681d      	ldr	r5, [r3, #0]
 8004252:	e003      	b.n	800425c <_printf_i+0xc4>
 8004254:	0645      	lsls	r5, r0, #25
 8004256:	d5fb      	bpl.n	8004250 <_printf_i+0xb8>
 8004258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800425c:	2d00      	cmp	r5, #0
 800425e:	da03      	bge.n	8004268 <_printf_i+0xd0>
 8004260:	232d      	movs	r3, #45	@ 0x2d
 8004262:	426d      	negs	r5, r5
 8004264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004268:	230a      	movs	r3, #10
 800426a:	4859      	ldr	r0, [pc, #356]	@ (80043d0 <_printf_i+0x238>)
 800426c:	e011      	b.n	8004292 <_printf_i+0xfa>
 800426e:	6821      	ldr	r1, [r4, #0]
 8004270:	6833      	ldr	r3, [r6, #0]
 8004272:	0608      	lsls	r0, r1, #24
 8004274:	f853 5b04 	ldr.w	r5, [r3], #4
 8004278:	d402      	bmi.n	8004280 <_printf_i+0xe8>
 800427a:	0649      	lsls	r1, r1, #25
 800427c:	bf48      	it	mi
 800427e:	b2ad      	uxthmi	r5, r5
 8004280:	2f6f      	cmp	r7, #111	@ 0x6f
 8004282:	6033      	str	r3, [r6, #0]
 8004284:	bf14      	ite	ne
 8004286:	230a      	movne	r3, #10
 8004288:	2308      	moveq	r3, #8
 800428a:	4851      	ldr	r0, [pc, #324]	@ (80043d0 <_printf_i+0x238>)
 800428c:	2100      	movs	r1, #0
 800428e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004292:	6866      	ldr	r6, [r4, #4]
 8004294:	2e00      	cmp	r6, #0
 8004296:	bfa8      	it	ge
 8004298:	6821      	ldrge	r1, [r4, #0]
 800429a:	60a6      	str	r6, [r4, #8]
 800429c:	bfa4      	itt	ge
 800429e:	f021 0104 	bicge.w	r1, r1, #4
 80042a2:	6021      	strge	r1, [r4, #0]
 80042a4:	b90d      	cbnz	r5, 80042aa <_printf_i+0x112>
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	d04b      	beq.n	8004342 <_printf_i+0x1aa>
 80042aa:	4616      	mov	r6, r2
 80042ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80042b0:	fb03 5711 	mls	r7, r3, r1, r5
 80042b4:	5dc7      	ldrb	r7, [r0, r7]
 80042b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042ba:	462f      	mov	r7, r5
 80042bc:	42bb      	cmp	r3, r7
 80042be:	460d      	mov	r5, r1
 80042c0:	d9f4      	bls.n	80042ac <_printf_i+0x114>
 80042c2:	2b08      	cmp	r3, #8
 80042c4:	d10b      	bne.n	80042de <_printf_i+0x146>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	07df      	lsls	r7, r3, #31
 80042ca:	d508      	bpl.n	80042de <_printf_i+0x146>
 80042cc:	6923      	ldr	r3, [r4, #16]
 80042ce:	6861      	ldr	r1, [r4, #4]
 80042d0:	4299      	cmp	r1, r3
 80042d2:	bfde      	ittt	le
 80042d4:	2330      	movle	r3, #48	@ 0x30
 80042d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042de:	1b92      	subs	r2, r2, r6
 80042e0:	6122      	str	r2, [r4, #16]
 80042e2:	464b      	mov	r3, r9
 80042e4:	4621      	mov	r1, r4
 80042e6:	4640      	mov	r0, r8
 80042e8:	f8cd a000 	str.w	sl, [sp]
 80042ec:	aa03      	add	r2, sp, #12
 80042ee:	f7ff fee1 	bl	80040b4 <_printf_common>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d14a      	bne.n	800438c <_printf_i+0x1f4>
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	b004      	add	sp, #16
 80042fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	f043 0320 	orr.w	r3, r3, #32
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	2778      	movs	r7, #120	@ 0x78
 800430a:	4832      	ldr	r0, [pc, #200]	@ (80043d4 <_printf_i+0x23c>)
 800430c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	6831      	ldr	r1, [r6, #0]
 8004314:	061f      	lsls	r7, r3, #24
 8004316:	f851 5b04 	ldr.w	r5, [r1], #4
 800431a:	d402      	bmi.n	8004322 <_printf_i+0x18a>
 800431c:	065f      	lsls	r7, r3, #25
 800431e:	bf48      	it	mi
 8004320:	b2ad      	uxthmi	r5, r5
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	07d9      	lsls	r1, r3, #31
 8004326:	bf44      	itt	mi
 8004328:	f043 0320 	orrmi.w	r3, r3, #32
 800432c:	6023      	strmi	r3, [r4, #0]
 800432e:	b11d      	cbz	r5, 8004338 <_printf_i+0x1a0>
 8004330:	2310      	movs	r3, #16
 8004332:	e7ab      	b.n	800428c <_printf_i+0xf4>
 8004334:	4826      	ldr	r0, [pc, #152]	@ (80043d0 <_printf_i+0x238>)
 8004336:	e7e9      	b.n	800430c <_printf_i+0x174>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	6023      	str	r3, [r4, #0]
 8004340:	e7f6      	b.n	8004330 <_printf_i+0x198>
 8004342:	4616      	mov	r6, r2
 8004344:	e7bd      	b.n	80042c2 <_printf_i+0x12a>
 8004346:	6833      	ldr	r3, [r6, #0]
 8004348:	6825      	ldr	r5, [r4, #0]
 800434a:	1d18      	adds	r0, r3, #4
 800434c:	6961      	ldr	r1, [r4, #20]
 800434e:	6030      	str	r0, [r6, #0]
 8004350:	062e      	lsls	r6, r5, #24
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	d501      	bpl.n	800435a <_printf_i+0x1c2>
 8004356:	6019      	str	r1, [r3, #0]
 8004358:	e002      	b.n	8004360 <_printf_i+0x1c8>
 800435a:	0668      	lsls	r0, r5, #25
 800435c:	d5fb      	bpl.n	8004356 <_printf_i+0x1be>
 800435e:	8019      	strh	r1, [r3, #0]
 8004360:	2300      	movs	r3, #0
 8004362:	4616      	mov	r6, r2
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	e7bc      	b.n	80042e2 <_printf_i+0x14a>
 8004368:	6833      	ldr	r3, [r6, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	1d1a      	adds	r2, r3, #4
 800436e:	6032      	str	r2, [r6, #0]
 8004370:	681e      	ldr	r6, [r3, #0]
 8004372:	6862      	ldr	r2, [r4, #4]
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f859 	bl	800442c <memchr>
 800437a:	b108      	cbz	r0, 8004380 <_printf_i+0x1e8>
 800437c:	1b80      	subs	r0, r0, r6
 800437e:	6060      	str	r0, [r4, #4]
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	2300      	movs	r3, #0
 8004386:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800438a:	e7aa      	b.n	80042e2 <_printf_i+0x14a>
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	47d0      	blx	sl
 8004396:	3001      	adds	r0, #1
 8004398:	d0ad      	beq.n	80042f6 <_printf_i+0x15e>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	079b      	lsls	r3, r3, #30
 800439e:	d413      	bmi.n	80043c8 <_printf_i+0x230>
 80043a0:	68e0      	ldr	r0, [r4, #12]
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	4298      	cmp	r0, r3
 80043a6:	bfb8      	it	lt
 80043a8:	4618      	movlt	r0, r3
 80043aa:	e7a6      	b.n	80042fa <_printf_i+0x162>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4632      	mov	r2, r6
 80043b0:	4649      	mov	r1, r9
 80043b2:	4640      	mov	r0, r8
 80043b4:	47d0      	blx	sl
 80043b6:	3001      	adds	r0, #1
 80043b8:	d09d      	beq.n	80042f6 <_printf_i+0x15e>
 80043ba:	3501      	adds	r5, #1
 80043bc:	68e3      	ldr	r3, [r4, #12]
 80043be:	9903      	ldr	r1, [sp, #12]
 80043c0:	1a5b      	subs	r3, r3, r1
 80043c2:	42ab      	cmp	r3, r5
 80043c4:	dcf2      	bgt.n	80043ac <_printf_i+0x214>
 80043c6:	e7eb      	b.n	80043a0 <_printf_i+0x208>
 80043c8:	2500      	movs	r5, #0
 80043ca:	f104 0619 	add.w	r6, r4, #25
 80043ce:	e7f5      	b.n	80043bc <_printf_i+0x224>
 80043d0:	08004533 	.word	0x08004533
 80043d4:	08004544 	.word	0x08004544

080043d8 <memmove>:
 80043d8:	4288      	cmp	r0, r1
 80043da:	b510      	push	{r4, lr}
 80043dc:	eb01 0402 	add.w	r4, r1, r2
 80043e0:	d902      	bls.n	80043e8 <memmove+0x10>
 80043e2:	4284      	cmp	r4, r0
 80043e4:	4623      	mov	r3, r4
 80043e6:	d807      	bhi.n	80043f8 <memmove+0x20>
 80043e8:	1e43      	subs	r3, r0, #1
 80043ea:	42a1      	cmp	r1, r4
 80043ec:	d008      	beq.n	8004400 <memmove+0x28>
 80043ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043f6:	e7f8      	b.n	80043ea <memmove+0x12>
 80043f8:	4601      	mov	r1, r0
 80043fa:	4402      	add	r2, r0
 80043fc:	428a      	cmp	r2, r1
 80043fe:	d100      	bne.n	8004402 <memmove+0x2a>
 8004400:	bd10      	pop	{r4, pc}
 8004402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800440a:	e7f7      	b.n	80043fc <memmove+0x24>

0800440c <_sbrk_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	2300      	movs	r3, #0
 8004410:	4d05      	ldr	r5, [pc, #20]	@ (8004428 <_sbrk_r+0x1c>)
 8004412:	4604      	mov	r4, r0
 8004414:	4608      	mov	r0, r1
 8004416:	602b      	str	r3, [r5, #0]
 8004418:	f7fd f922 	bl	8001660 <_sbrk>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d102      	bne.n	8004426 <_sbrk_r+0x1a>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b103      	cbz	r3, 8004426 <_sbrk_r+0x1a>
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	bd38      	pop	{r3, r4, r5, pc}
 8004428:	2000030c 	.word	0x2000030c

0800442c <memchr>:
 800442c:	4603      	mov	r3, r0
 800442e:	b510      	push	{r4, lr}
 8004430:	b2c9      	uxtb	r1, r1
 8004432:	4402      	add	r2, r0
 8004434:	4293      	cmp	r3, r2
 8004436:	4618      	mov	r0, r3
 8004438:	d101      	bne.n	800443e <memchr+0x12>
 800443a:	2000      	movs	r0, #0
 800443c:	e003      	b.n	8004446 <memchr+0x1a>
 800443e:	7804      	ldrb	r4, [r0, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	428c      	cmp	r4, r1
 8004444:	d1f6      	bne.n	8004434 <memchr+0x8>
 8004446:	bd10      	pop	{r4, pc}

08004448 <memcpy>:
 8004448:	440a      	add	r2, r1
 800444a:	4291      	cmp	r1, r2
 800444c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004450:	d100      	bne.n	8004454 <memcpy+0xc>
 8004452:	4770      	bx	lr
 8004454:	b510      	push	{r4, lr}
 8004456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800445a:	4291      	cmp	r1, r2
 800445c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004460:	d1f9      	bne.n	8004456 <memcpy+0xe>
 8004462:	bd10      	pop	{r4, pc}

08004464 <_realloc_r>:
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004468:	4680      	mov	r8, r0
 800446a:	4615      	mov	r5, r2
 800446c:	460c      	mov	r4, r1
 800446e:	b921      	cbnz	r1, 800447a <_realloc_r+0x16>
 8004470:	4611      	mov	r1, r2
 8004472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004476:	f7ff bc39 	b.w	8003cec <_malloc_r>
 800447a:	b92a      	cbnz	r2, 8004488 <_realloc_r+0x24>
 800447c:	f7ff fbcc 	bl	8003c18 <_free_r>
 8004480:	2400      	movs	r4, #0
 8004482:	4620      	mov	r0, r4
 8004484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004488:	f000 f81a 	bl	80044c0 <_malloc_usable_size_r>
 800448c:	4285      	cmp	r5, r0
 800448e:	4606      	mov	r6, r0
 8004490:	d802      	bhi.n	8004498 <_realloc_r+0x34>
 8004492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004496:	d8f4      	bhi.n	8004482 <_realloc_r+0x1e>
 8004498:	4629      	mov	r1, r5
 800449a:	4640      	mov	r0, r8
 800449c:	f7ff fc26 	bl	8003cec <_malloc_r>
 80044a0:	4607      	mov	r7, r0
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d0ec      	beq.n	8004480 <_realloc_r+0x1c>
 80044a6:	42b5      	cmp	r5, r6
 80044a8:	462a      	mov	r2, r5
 80044aa:	4621      	mov	r1, r4
 80044ac:	bf28      	it	cs
 80044ae:	4632      	movcs	r2, r6
 80044b0:	f7ff ffca 	bl	8004448 <memcpy>
 80044b4:	4621      	mov	r1, r4
 80044b6:	4640      	mov	r0, r8
 80044b8:	f7ff fbae 	bl	8003c18 <_free_r>
 80044bc:	463c      	mov	r4, r7
 80044be:	e7e0      	b.n	8004482 <_realloc_r+0x1e>

080044c0 <_malloc_usable_size_r>:
 80044c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044c4:	1f18      	subs	r0, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	bfbc      	itt	lt
 80044ca:	580b      	ldrlt	r3, [r1, r0]
 80044cc:	18c0      	addlt	r0, r0, r3
 80044ce:	4770      	bx	lr

080044d0 <_init>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	bf00      	nop
 80044d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d6:	bc08      	pop	{r3}
 80044d8:	469e      	mov	lr, r3
 80044da:	4770      	bx	lr

080044dc <_fini>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	bf00      	nop
 80044e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044e2:	bc08      	pop	{r3}
 80044e4:	469e      	mov	lr, r3
 80044e6:	4770      	bx	lr
